webpackJsonp([127],{"./node_modules/json-loader/index.js!./.cache/json/articles-ruby-ruby-string-methods.json":function(e,n){e.exports={data:{markdownRemark:{html:'<p>Ruby has many built in methods to work with strings. Strings in Ruby by default are mutable and can be changed in place or a new string can be returned from a method.</p>\n<h2>Length:</h2>\n<ul>\n<li>\n<p>The <code>.length</code> property returns the number of characters in a string including white-space.</p>\n<p>"Hello".length</p>\n<h1>returns: 5</h1>\n<p>"Hello World!".length</p>\n<h1>returns: 12</h1>\n</li>\n</ul>\n<h2>Count:</h2>\n<ul>\n<li>\n<p>The <code>.count</code> method counts how many times a specific character(s) is found in a string.</p>\n</li>\n<li>\n<p>This method is case-sensitive.</p>\n<p>"HELLO".count(\'L\')  </p>\n<h1>returns: 2</h1>\n<p>"HELLO WORLD!".count(\'LO\')  </p>\n<h1>returns: 1</h1>\n</li>\n</ul>\n<h2>Insert:</h2>\n<ul>\n<li>\n<p>The <code>.insert</code> method inserts a string into another string before a given index.</p>\n<p>"Hello".insert(3, "hi5")</p>\n<h1>returns:</h1>\n<p>Helhi5lo</p>\n<h1>"hi5" is inserted into the string right before the second \'l\' which is at index 3</h1>\n</li>\n</ul>\n<h2>Upcase:</h2>\n<ul>\n<li>\n<p>The <code>.upcase</code> method transforms all letters in a string to uppercase.</p>\n<p>"Hello".upcase</p>\n<h1>returns:</h1>\n<p>HELLO</p>\n</li>\n</ul>\n<h2>Downcase:</h2>\n<ul>\n<li>\n<p>The <code>.downcase</code> method transforms all letters in a string to lowercase.</p>\n<p>"Hello".downcase</p>\n<h1>returns:</h1>\n<p>hello</p>\n</li>\n</ul>\n<h2>Capitilize:</h2>\n<ul>\n<li>\n<p>The <code>.capitalize</code> method make the first letter in a string uppercase and the rest of the string lowercase.</p>\n<p>"HELLO".capitalize</p>\n<h1>returns:</h1>\n<p>Hello</p>\n<p>"HELLO, HOW ARE YOU?".capitalize</p>\n<h1>returns:</h1>\n<p>Hello, how are you?</p>\n</li>\n</ul>\n<p><em>Note that the first letter is only capitilized if it is at the beginning of the string.</em></p>\n<pre><code>"-HELLO".capitalize\n"1HELLO".capitalize\n# returns:\n-hello\n1hello\n</code></pre>\n<h2>Reverse:</h2>\n<ul>\n<li>\n<p>The <code>.reverse</code> method reverses the order of the characters in a string.</p>\n<p>"Hello World!".reverse</p>\n<h1>returns:</h1>\n<p>"!dlroW olleH"</p>\n</li>\n</ul>\n<h2>Split:</h2>\n<ul>\n<li>\n<p>The <code>.split</code> takes a strings and <em>splits</em> it into an array, then returns the array.</p>\n</li>\n<li>\n<p>The default method splits the string based on whitespace, unless a different separator is provided (see second example).</p>\n<p>"Hello, how are you?".split</p>\n<h1>returns:</h1>\n<p>["Hello,", "how", "are", "you?"]</p>\n<p>"H-e-l-l-o".split(\'-\')</p>\n<h1>returns:</h1>\n<p>["H", "e", "l", "l", "o"]</p>\n</li>\n</ul>\n<h2>Chop:</h2>\n<ul>\n<li>\n<p>The <code>.chop</code> method removes the last character of the string.</p>\n</li>\n<li>\n<p>A new string is returned, unless you use the <code>.chop!</code> method which mutates the original string.</p>\n<p>"Name".chop</p>\n<h1>returns:</h1>\n<p>Nam</p>\n<p>name = "Batman"\nname.chop\nname == "Batma" # returns false</p>\n<p>name = "Batman"\nname.chop!\nname == "Batma" # returns true</p>\n</li>\n</ul>\n<h2>Strip:</h2>\n<ul>\n<li>\n<p>The <code>.strip</code> method removes the leading and trailing whitespace on strings, including tabs, newlines, and carriage returns (<code>\\t</code>, <code>\\n</code>, <code>\\r</code>).</p>\n<p>"  Hello  ".strip</p>\n<h1>returns:</h1>\n<p>Hello</p>\n</li>\n</ul>\n<h2>Chomp:</h2>\n<ul>\n<li>\n<p>The <code>.chomp</code> method removes the last character in a string, only if itâ€™s a carriage return or newline (<code>\\r</code>, <code>\\n</code>).</p>\n</li>\n<li>\n<p>This method is commonly used with the <code>gets</code> command to remove returns from user input.</p>\n<p>"hello\\r".chomp</p>\n<h1>returns:</h1>\n<p>hello</p>\n<p>"hello\\t".chomp</p>\n<h1>returns:</h1>\n<p>hello\\t #because tabs and other whitespace remain intact when using <code>chomp</code></p>\n</li>\n</ul>\n<h2>To Integer:</h2>\n<ul>\n<li>\n<p>The <code>.to_i</code> method converts a string to an integer.</p>\n<p>"15".to_i</p>\n<h1>returns:</h1>\n<p>15 #integer</p>\n</li>\n</ul>',frontmatter:{title:"Ruby String Methods",parent:"/home/stuart/guides/src/pages/articles/ruby/ruby-string-methods/index.md absPath of file"}}},pathContext:{slug:"/articles/ruby/ruby-string-methods/"}}}});
//# sourceMappingURL=path---articles-ruby-ruby-string-methods-7bad08a343ffd3b9d2c3.js.map