webpackJsonp([2137],{"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-record-collection.json":function(e,t){e.exports={data:{markdownRemark:{html:'<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3" alt=":triangular_flag_on_post:" title=":triangular_flag_on_post:"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3" alt=":busts_in_silhouette:" title=":busts_in_silhouette:"> and write your own code <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3" alt=":pencil:" title=":pencil:"></p>\n<h3><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/checkered_flag.png?v=3" alt=":checkered_flag:" title=":checkered_flag:"> Problem Explanation:</h3>\n<p>You are given a JSON object representing (a small part of) your record collection. Each album is identified by a unique id number and has several properties. Not all albums have complete information.</p>\n<p>Write a function which takes an <strong>id</strong>, a property (<strong>prop</strong>), and a <strong>value</strong>.</p>\n<p>For the given <strong>id</strong> in <strong>collection</strong>:</p>\n<p>If <strong>value</strong> is non-blank (<strong>value !== ""</strong>), then update or set the <strong>value</strong> for the <strong>prop</strong>.</p>\n<p>If the <strong>prop</strong> is <strong>"tracks"</strong> and <strong>value</strong> is non-blank, check to see if the given element in the array has the property of "tracks". If the element has the property of "tracks", push the <strong>value</strong> onto the end of the "tracks" array. If the element does not have the <strong>property</strong>, create the property and value pair.</p>\n<p>If <strong>value</strong> is blank, delete that <strong>prop</strong>.</p>\n<p>Always return the entire collection object.</p>\n<ul>\n<li>Change the code below <code>// Only change code below this line</code> and up to <code>// Alter values below to test your code</code>.</li>\n<li>Take note that you are editing the inside of the <code>updateRecords</code> function.</li>\n<li>\n<p>For the given <strong>id</strong> parameter, which is associated to the <strong>collection</strong> object:</p>\n<ul>\n<li>If the <strong>value</strong> parameter isn\'t an empty string, update (or set) the <strong>value</strong> parameter for the <strong>prop</strong> parameter.</li>\n<li>If the <strong>prop</strong> parameter is equal to <code>"tracks"</code> and the <strong>value</strong> isn\'t an empty string, push the <strong>value</strong> onto the end of the <strong>tracks</strong> array.</li>\n<li>If <strong>value</strong> is an empty string, delete that <strong>prop</strong> from the object.</li>\n</ul>\n</li>\n<li>Finally, return the <strong>collection</strong> object.</li>\n</ul>\n<h4>Relevant Links</h4>\n<ul>\n<li><a href="http://www.freecodecamp.com/challenges/accessing-objects-properties-with-bracket-notation">Challenge: Accessing Objects Properties with Bracket Notation</a></li>\n<li><a href="http://www.freecodecamp.com/challenges/add-new-properties-to-a-javascript-object">Challenge: Add New Properties to a JavaScript Object</a></li>\n<li><a href="http://www.freecodecamp.com/challenges/delete-properties-from-a-javascript-object">Challenge: Delete Properties from a JavaScript Object</a></li>\n<li><a href="http://www.freecodecamp.com/challenges/accessing-nested-objects-in-json">Challenge: Accessing Nested Objects in JSON</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" alt=":speech_balloon:" title=":speech_balloon:"> Hint: 1</h2>\n<p>Use an <code>else if</code> statement to check the needed steps.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" alt=":speech_balloon:" title=":speech_balloon:"> Hint: 2</h2>\n<p>The second step listed in the instructions should be first in your <code>else if</code> statement.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" alt=":speech_balloon:" title=":speech_balloon:"> Hint: 3</h2>\n<p>To access the value of a key in this object, you will use <code>collection[id][prop]</code>.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2>Spoiler Alert!</h2>\n<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif" alt="687474703a2f2f7777772e796f75726472756d2e636f6d2f796f75726472756d2f696d616765732f323030372f31302f31302f7265645f7761726e696e675f7369676e5f322e676966.gif"></p>\n<p><strong>Solution ahead!</strong></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3" alt=":beginner:" title=":beginner:"> Basic Code Solution:</h2>\n<pre><code>function updateRecords(id, prop, value) {\n  if (prop === "tracks" &#x26;&#x26; value !== "") {\n   if(collection[id][prop]) {\n    collection[id][prop].push(value);\n   }\n   else {\n    collection[id][prop]=[value];\n   }\n  } else if (value !== "") {\n    collection[id][prop] = value;\n  } else {\n    delete collection[id][prop];\n  }\n\n  return collection;\n}\n</code></pre>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/C2AZ/0">Run Code</a></p>\n<h3>Code Explanation:</h3>\n<ul>\n<li>First checks if <strong>prop</strong> is equal to <strong>tracks</strong> AND if <strong>value</strong> isn\'t a blank string. If both tests pass, <strong>value</strong> is pushed into the <strong>tracks</strong> array.</li>\n<li>If that first check doesn\'t pass, it next checks only if <strong>value</strong> isn\'t a blank string. If that test passes, either a new key (<strong>prop</strong>) and value (<strong>value</strong>) are added to the object, or an existing key is updated if the <strong>prop</strong> already exists.</li>\n<li>If both these checks fail (meaning <strong>value</strong> must be an empty string), then the key (<strong>prop</strong>) is removed from the object.</li>\n</ul>\n<p><strong>Example Run</strong></p>\n<ul>\n<li><code>updateRecords(5439, "artist", "ABBA");</code> runs.</li>\n<li><strong>prop</strong> is equal to "artist", not "tracks", so the first part of the <code>else if</code> statement fails.</li>\n<li><strong>value</strong> is not a blank string, so the second part of the else if statement passes.</li>\n<li><code>artist: "ABBA"</code> is added to the <code>5439</code> <code>id</code>.</li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3" alt=":clipboard:" title=":clipboard:"> NOTES FOR CONTRIBUTIONS:</h2>\n<ul>\n<li><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" alt=":warning:" title=":warning:"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\n<li>Add an explanation of your solution.</li>\n<li>Categorize the solution in one of the following categories â€” <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3" alt=":traffic_light:" title=":traffic_light:"></li>\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" alt=":warning:" title=":warning:"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\n</ul>\n<blockquote>\n<p>See <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3" alt=":point_right:" title=":point_right:"> <a href="http://forum.freecodecamp.com/t/algorithm-article-template/14272"><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\n</blockquote>',frontmatter:{title:"Record Collection",parent:"/home/stuart/guides/src/pages/articles/certificates/record-collection/index.md absPath of file"}}},pathContext:{slug:"/articles/certificates/record-collection/"}}}});
//# sourceMappingURL=path---articles-certificates-record-collection-d421c5b91311113ab2e6.js.map