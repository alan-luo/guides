webpackJsonp([2032],{"./node_modules/json-loader/index.js!./.cache/json/articles-clojure-clojure-create-local-variables-with-let.json":function(e,o){e.exports={data:{markdownRemark:{html:'<p><code>let</code> is a fundamental part of Clojure. Whereas <code>def</code> creates a global variable, <code>let</code> creates a local variable.</p>\n<pre><code>(def x 5)\n(println x)\n; => 5\n;    nil\n(let [x 2]\n  (println x))\n; => 2\n;    nil\n(println x)\n; => 5\n;    nil\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://ideone.com/xcNth2">IDEOne it!</a></p>\n<p><code>x</code> in this example never actually gets changed. <code>x</code> just refers to something different inside of our <code>let</code> binding. This can be a useful way to avoid repetition inside a function.</p>\n<p>This is incredibly useful. Having too many global variables can lead to nasty bugs and unintended behaviour.</p>\n<pre><code>(def x 5)\n(defn add-5 [y] (+ x y))\n(add-5 5)\n; => 10\n(defn change-x []\n  (def x 6))\n(change-x)\n; => nil\n(add-5 5)\n; => 11\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://ideone.com/MFjA3C">IDEOne it!</a></p>\n<p>Uh oh! That\'s not adding 5 anymore! Of course, this example is a bit silly, but using too many global variables can lead to bugs that are just as scary as this one.</p>\n<p><strong>Note:</strong> We aren\'t really <em>reassigning</em> <code>x</code> here, like you would in a C-like language. We\'re just creating a new variable that happens to also be called x. This is a <em>very, very, <strong>very</strong></em> bad idea.</p>\n<h2>Multiple Bindings</h2>\n<p><code>let</code> can also define multiple variables at once, and can assign variables to expressions.</p>\n<pre><code>(let [spam "foo"\n      ham (str "b" "ar")] ; str is a function that concatenates strings\n  (println spam ham))      ; or converts variables into strings.\n; => foo bar\n;    nil\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://ideone.com/y5EBIM">IDEOne it!</a></p>\n<p>| <a href="//forum.freecodecamp.com/t/clojure-conditionals/18412"><img src="//forum.freecodecamp.com/images/emoji/emoji_one/point_left.png?v=2" alt=":point_left:" title=":point_left:"> Previous</a> | <a href="//forum.freecodecamp.com/t/clojure-resources/18422"><img src="//forum.freecodecamp.com/images/emoji/emoji_one/book.png?v=2" alt=":book:" title=":book:"> Home <img src="//forum.freecodecamp.com/images/emoji/emoji_one/book.png?v=2" alt=":book:" title=":book:"></a> | <a href="//forum.freecodecamp.com/t/clojure-loop-recur/18418">Next <img src="//forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=2" alt=":point_right:" title=":point_right:"></a>|<br>\n| <a href="//forum.freecodecamp.com/t/clojure-conditionals/18412">Conditionals</a> | <a href="//forum.freecodecamp.com/t/clojure-resources/18422">Table of Contents</a> | <a href="//forum.freecodecamp.com/t/clojure-loop-recur/18418">Loop and Recur</a>|</p>',frontmatter:{title:"Clojure Create Local Variables with Let",parent:"/home/stuart/guides/src/pages/articles/clojure/clojure-create-local-variables-with-let/index.md absPath of file"}}},pathContext:{slug:"/articles/clojure/clojure-create-local-variables-with-let/"}}}});
//# sourceMappingURL=path---articles-clojure-clojure-create-local-variables-with-let-fb508382897459e41e9b.js.map