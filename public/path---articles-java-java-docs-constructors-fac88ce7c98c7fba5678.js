webpackJsonp([1340],{"./node_modules/json-loader/index.js!./.cache/json/articles-java-java-docs-constructors.json":function(e,n){e.exports={data:{markdownRemark:{html:'<h1>Java Constructors</h1>\n<p>What\'s the point then? I should be able to store data in it right?</p>\n<p>That\'s when we use either <strong>getter</strong> (e.g., getName()) / <strong>setter</strong> (e.g., setName()) methods or in this case constructors to initialize a class. Basically every Java Class has a constructor, which is the method which is called first when any object of the class is initialized. Think of it as a bit of starter code.</p>\n<p>When you write a class without any constructor, then Java assumes it has a default constructor :</p>\n<pre><code>public class Car {\n    private String name;\n}\n\nCar modelS = new Car();\n</code></pre>\n<p>This initializing with no parameters is a way of calling the default constructor. You can also have a default constructor written yourself this way :</p>\n<pre><code>public class Car {\n    private String name;\n\n    public Car() {\n        name = "Tesla";\n    }\n}\n</code></pre>\n<p>Then, when calling <code>new Car()</code>, the variable <code>name</code> will get auto-initialized to <code>"Tesla"</code>.</p>\n<p>Clearly, constructors are exactly what they sound like: they are used to <code>construct</code> i.e., instantiate an object of a particular class.<br>\nConstructors look similar to method declarations, but are slightly different in the sense that they:</p>\n<ol>\n<li>Are named exactly the same as the class.</li>\n<li>Don\'t have a return type.</li>\n</ol>\n<p>Hence, the purpose of using <code>constructors</code> is to provide:</p>\n<ol>\n<li>A way to instantiate an object.</li>\n<li>Provide initial values to a object properties.</li>\n<li>Control how an object is created.</li>\n</ol>\n<p>Let\'s look at another example. Say, Honda (the car manufacturer), wants all its cars to be named <code>Honda &#x3C;something></code>. In order to enforce this, we might represent this using a class as follows:</p>\n<pre><code>public class Car {\n\n    private String name;\n\n    //Constructor.\n    public Car(String model){\n        this.name = "Honda " + model;\n    }\n\n    public String getName(){\n        return this.name;\n    }\n\n    public static void main(String args[]){\n        Car car = new Car("Civic");\n        System.out.println( car.getName() );\n    }\n}\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CTJ4/1">Run Code</a></p>\n<p>Notice that when we write a constructor in this way i.e., providing a parameter, we are <code>controlling</code> (point no. 3) the way an instance of <code>Car</code> is created. In short, we are saying in this example that <code>you MUST provide a model name in order to get an instance of Car class</code>.</p>\n<p>Why is this important? There are times when you\'d want <code>one and only one</code> instance of a class which you\'d want to use in your entire application. One way of achieving this is by using a <code>private</code> constructor.</p>\n<p>Assume you need a class to represent a Bank. You wouldn\'t want people to create instance of <code>Bank</code> ever. So, you design your class:</p>\n<pre><code>public class Bank {\n\n    private static Bank instance;\n\n    private Bank(){\n\n    }\n\n    public static Bank getInstance(){\n        if(null==instance){\n            instance = new Bank();\n        }\n        return instance;\n    }\n\n}\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CTJz/0">Run Code</a></p>\n<p>Notice that the constructor is <code>private</code>. This enforces the fact that no one else is allowed to create an <code>instance</code> of the Bank.<br>\nIn fact, if in another class, you try:</p>\n<pre><code>Bank account = new Bank(); //-> throws a compilation error: Bank() has private access in Bank.\n</code></pre>\n<p>So, the only way to gain access to the instance is by using <code>Bank.getInstance()</code>. Such instances are called <code>Singleton</code> since you get exactly one instance (per VM to be precise) throughout the life of your application.</p>',frontmatter:{title:"Java Docs Constructors",parent:"/home/stuart/guides/src/pages/articles/java/java-docs-constructors/index.md absPath of file"}}},pathContext:{slug:"/articles/java/java-docs-constructors/"}}}});
//# sourceMappingURL=path---articles-java-java-docs-constructors-fac88ce7c98c7fba5678.js.map