{"version":3,"sources":["webpack:///path---articles-miscellaneous-restrict-access-to-authenticated-users-only-19cfeb50d0755553e96a.js","webpack:///./.cache/json/articles-miscellaneous-restrict-access-to-authenticated-users-only.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-restrict-access-to-authenticated-users-only.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,4HACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,k0BACAC,aACAC,MAAA,8CACAC,OAAA,+HAIAC,aACAC,KAAA","file":"path---articles-miscellaneous-restrict-access-to-authenticated-users-only-19cfeb50d0755553e96a.js","sourcesContent":["webpackJsonp([262],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-restrict-access-to-authenticated-users-only.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>Let's say you have a route that you want to restrict to logged-in users; maybe you have a <code>/profile</code> page that lets your users fill in some information about themselves, but it wouldn't work if they weren't logged in. Open <strong>/client/app/profile/profile.js</strong>, and add <code>authenticate: true</code> to the options passed to <em>$routeProvider.when</em> like so:</p>\\n<pre><code>    $routeProvider\\n      .when('/profile', {\\n        templateUrl: 'app/profile/profile.html',\\n        controller: 'ProfileCtrl',\\n        authenticate: true // restrict to authenticated users\\n      });\\n</code></pre>\\n<p>This way, if the user isn't authenticated when they try to access the <code>/profile</code> page, they'll be redirected to your login screen to authenticate before continuing to their profile page.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Restrict Access To Authenticated Users Only\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/miscellaneous/restrict-access-to-authenticated-users-only/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/miscellaneous/restrict-access-to-authenticated-users-only/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-miscellaneous-restrict-access-to-authenticated-users-only-19cfeb50d0755553e96a.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>Let's say you have a route that you want to restrict to logged-in users; maybe you have a <code>/profile</code> page that lets your users fill in some information about themselves, but it wouldn't work if they weren't logged in. Open <strong>/client/app/profile/profile.js</strong>, and add <code>authenticate: true</code> to the options passed to <em>$routeProvider.when</em> like so:</p>\\n<pre><code>    $routeProvider\\n      .when('/profile', {\\n        templateUrl: 'app/profile/profile.html',\\n        controller: 'ProfileCtrl',\\n        authenticate: true // restrict to authenticated users\\n      });\\n</code></pre>\\n<p>This way, if the user isn't authenticated when they try to access the <code>/profile</code> page, they'll be redirected to your login screen to authenticate before continuing to their profile page.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Restrict Access To Authenticated Users Only\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/miscellaneous/restrict-access-to-authenticated-users-only/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/miscellaneous/restrict-access-to-authenticated-users-only/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-miscellaneous-restrict-access-to-authenticated-users-only.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-restrict-access-to-authenticated-users-only.json\n// module chunks = 262"],"sourceRoot":""}