{"version":3,"sources":["webpack:///path---articles-java-java-docs-inheritance-basics-c8fd655cf8ab86828601.js","webpack:///./.cache/json/articles-java-java-docs-inheritance-basics.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-java-java-docs-inheritance-basics.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,oGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,y2DACAC,aACAC,MAAA,+BACAC,OAAA,uGAIAC,aACAC,KAAA","file":"path---articles-java-java-docs-inheritance-basics-c8fd655cf8ab86828601.js","sourcesContent":["webpackJsonp([1559],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-java-java-docs-inheritance-basics.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<h1>Java Inheritance Basics</h1>\\n<p>So great you have successfully created a Car class. But, wait, aren't Tesla cars supposed to be electric variants? I want an Electric car class, but it also should have the properties of the original <code>Car</code> class.</p>\\n<p>Solution : <strong>Inheritance</strong>. Java provides a neat way to \\\"inherit\\\" parent properties :</p>\\n<pre><code>public class Car {\\n\\n    private String name;\\n    private String manufacturerName;\\n\\n    public Car(String name, String man) {\\n        this.name = name;\\n        this.manufacturerName = man;\\n    }\\n    // Getter method\\n    public String getName() {\\n        return name;\\n    }\\n    // Getter method\\n    public String getManufacturerName() {\\n        return manufacturerName;\\n    }\\n}\\n\\npublic class ElectricCar extends Car {\\n\\n    public ElectricCar(String name, String man) {\\n        super(name, man);\\n    }\\n\\n    public void charge() {\\n     System.out.println(\\\"Charging ...\\\");\\n    }\\n}\\n\\nElectricCar modelS = new ElectricCar(\\\"Model S\\\",\\\"Tesla\\\");\\n// prints Tesla\\nSystem.out.println(modelS.getManufacturerName());\\n// prints Charging ...\\nmodelS.charge();\\n</code></pre>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CJZY/0\\\">Run Code</a></p>\\n<p>See here that the class <code>ElecticCar</code> inherits or <code>extends</code> the public methods from <code>Car</code> class, as well as has its own methods and properties. Cool way to pass on information!</p>\\n<p>Also notice the usage of <a href=\\\"https://docs.oracle.com/javase/tutorial/java/IandI/super.html\\\">super</a> keyword here. Since our <code>Car</code> class had a constructor, so we have to initialize that constructor from the child class as well. We do that using the <code>super</code> keyword. Read more about <a>Inheritance here</a>.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Java Docs Inheritance Basics\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/java/java-docs-inheritance-basics/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/java/java-docs-inheritance-basics/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-java-java-docs-inheritance-basics-c8fd655cf8ab86828601.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<h1>Java Inheritance Basics</h1>\\n<p>So great you have successfully created a Car class. But, wait, aren't Tesla cars supposed to be electric variants? I want an Electric car class, but it also should have the properties of the original <code>Car</code> class.</p>\\n<p>Solution : <strong>Inheritance</strong>. Java provides a neat way to \\\"inherit\\\" parent properties :</p>\\n<pre><code>public class Car {\\n\\n    private String name;\\n    private String manufacturerName;\\n\\n    public Car(String name, String man) {\\n        this.name = name;\\n        this.manufacturerName = man;\\n    }\\n    // Getter method\\n    public String getName() {\\n        return name;\\n    }\\n    // Getter method\\n    public String getManufacturerName() {\\n        return manufacturerName;\\n    }\\n}\\n\\npublic class ElectricCar extends Car {\\n\\n    public ElectricCar(String name, String man) {\\n        super(name, man);\\n    }\\n\\n    public void charge() {\\n     System.out.println(\\\"Charging ...\\\");\\n    }\\n}\\n\\nElectricCar modelS = new ElectricCar(\\\"Model S\\\",\\\"Tesla\\\");\\n// prints Tesla\\nSystem.out.println(modelS.getManufacturerName());\\n// prints Charging ...\\nmodelS.charge();\\n</code></pre>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CJZY/0\\\">Run Code</a></p>\\n<p>See here that the class <code>ElecticCar</code> inherits or <code>extends</code> the public methods from <code>Car</code> class, as well as has its own methods and properties. Cool way to pass on information!</p>\\n<p>Also notice the usage of <a href=\\\"https://docs.oracle.com/javase/tutorial/java/IandI/super.html\\\">super</a> keyword here. Since our <code>Car</code> class had a constructor, so we have to initialize that constructor from the child class as well. We do that using the <code>super</code> keyword. Read more about <a>Inheritance here</a>.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Java Docs Inheritance Basics\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/java/java-docs-inheritance-basics/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/java/java-docs-inheritance-basics/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-java-java-docs-inheritance-basics.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-java-java-docs-inheritance-basics.json\n// module chunks = 1559"],"sourceRoot":""}