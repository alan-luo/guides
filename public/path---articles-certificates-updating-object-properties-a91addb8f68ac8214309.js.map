{"version":3,"sources":["webpack:///path---articles-certificates-updating-object-properties-a91addb8f68ac8214309.js","webpack:///./.cache/json/articles-certificates-updating-object-properties.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-certificates-updating-object-properties.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,0GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,8uBACAC,aACAC,MAAA,6BACAC,OAAA,6GAIAC,aACAC,KAAA","file":"path---articles-certificates-updating-object-properties-a91addb8f68ac8214309.js","sourcesContent":["webpackJsonp([2076],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-updating-object-properties.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.</p>\\n<p>For example, let's look at <code>ourDog</code>:</p>\\n<pre><code>var ourDog = {\\n  \\\"name\\\": \\\"Camper\\\",\\n  \\\"legs\\\": 4,\\n  \\\"tails\\\": 1,\\n  \\\"friends\\\": [\\\"everything!\\\"]\\n};\\n</code></pre>\\n<p>Since he's a particularly happy dog, let's change his name to \\\"Happy Camper\\\". Here's how we update his object's name property:</p>\\n<p><code>ourDog.name = \\\"Happy Camper\\\";</code> or</p>\\n<p><code>ourDog[\\\"name\\\"] = \\\"Happy Camper\\\";</code></p>\\n<p>Now when we evaluate <code>ourDog.name</code>, instead of getting \\\"Camper\\\", we'll get his new name, \\\"Happy Camper\\\".</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Updating Object Properties\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/updating-object-properties/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/certificates/updating-object-properties/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-certificates-updating-object-properties-a91addb8f68ac8214309.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>After you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.</p>\\n<p>For example, let's look at <code>ourDog</code>:</p>\\n<pre><code>var ourDog = {\\n  \\\"name\\\": \\\"Camper\\\",\\n  \\\"legs\\\": 4,\\n  \\\"tails\\\": 1,\\n  \\\"friends\\\": [\\\"everything!\\\"]\\n};\\n</code></pre>\\n<p>Since he's a particularly happy dog, let's change his name to \\\"Happy Camper\\\". Here's how we update his object's name property:</p>\\n<p><code>ourDog.name = \\\"Happy Camper\\\";</code> or</p>\\n<p><code>ourDog[\\\"name\\\"] = \\\"Happy Camper\\\";</code></p>\\n<p>Now when we evaluate <code>ourDog.name</code>, instead of getting \\\"Camper\\\", we'll get his new name, \\\"Happy Camper\\\".</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Updating Object Properties\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/updating-object-properties/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/certificates/updating-object-properties/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-certificates-updating-object-properties.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-certificates-updating-object-properties.json\n// module chunks = 2076"],"sourceRoot":""}