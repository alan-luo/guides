webpackJsonp([448],{"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-algoritmo-mensaje-secreto.json":function(e,a){e.exports={data:{markdownRemark:{html:'<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/7/70cf3cc5462f69c2f770ad42d0f24f240a8d8f13.jpg"></p>\n<h3>Explicación:</h3>\n<p>Este problema es muy sencillo, obtendrás una cadena que represente a una frase en código binario, y deberás traducirlo a palabras. No hay forma directa de hacer esto por lo que tendrá que traducir dos veces.</p>\n<h2>Pista: 1</h2>\n<p>Primero debes convertir de <strong>binario</strong> a <strong>decimal</strong> para luego poder traducirlo a caracteres.</p>\n<h2>Pista: 2</h2>\n<p>Las cosas son más fáciles si te centras en partes pequeñas, divide el mensaje lo que recibas y céntrate en una letra la vez.</p>\n<h2>Pista: 3</h2>\n<p>Asegúrate luego de transcodificar un carácter de binario a decimal de restablecer cualquiera de las variantes que utilizaste para realizar la traducción. Asimismo, no te olvides de poner todo de nuevo en una sola cadena.</p>\n<h2>¡Alerta de Spoiler!</h2>\n<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif" alt="687474703a2f2f7777772e796f75726472756d2e636f6d2f796f75726472756d2f696d616765732f323030372f31302f31302f7265645f7761726e696e675f7369676e5f322e676966.gif"></p>\n<p><strong>¡Solución abajo!</strong></p>\n<h2>Solución del código:</h2>\n<pre><code>function binaryAgent(str) {\n  biString = str.split(\' \');\n  uniString = [];\n\n  // Utilizando el parámetro base en parseInt podemos convertir el número\n  // binario a número decimal mientras simultáneamente lo convertimos a carácter.\n\n  for(i=0;i &#x3C; biString.length;i++){\n    uniString.push(String.fromCharCode(parseInt(biString[i], 2))); \n  }\n  // Simplemente unimos la cadena.\n  return uniString.join(\'\');\n}\n\n// realizamos el test\nbinaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLnm/0">¡En REPL!</a></p>\n<h1>Explicación del código:</h1>\n<ul>\n<li>Separamos la cadena en una matriz de cadenas separadas por espacios en blanco.</li>\n<li>Creamos una variable que será necesaria a lo largo del camino, el nombre se explica por si mismo.</li>\n<li>Iteramos por la nueva matriz de binarios.</li>\n<li>Convertimos a decimal utilizando parseInt(<em>binario</em>, 2) (con el segundo parámetro le decimos en que base nuestros números están actualmente)</li>\n<li>Al final, retornamos nuestro mensaje convertido.</li>\n</ul>\n<h2>Segunda solución:</h2>\n<pre><code>function binaryAgent(str) {\n  // Separamos el código binario por sus espacios.\n  str = str.split(\' \');\n  var power;\n  var decValue = 0;\n  var sentence = \'\';\n\n  // Comprobamos cada número binario de la matriz.\n  for (var s = 0; s &#x3C; str.length; s++) {\n    // Comprobamos cada bit del número binario.\n    for (var t = 0; t &#x3C; str[s].length; t++) {\n      // Esto solo toma en consideración los activos.\n      if (str[s][t] == 1) {\n        // Esto es equivalente a 2 ** posición.\n        power = Math.pow(2, +str[s].length - t - 1);\n        decValue += power;\n\n        // Guardamos el valor decimal sumándolo al anterior.\n      }\n    }\n\n    // Luego de que el número binario es convertido a decimal, lo convertimos en una cadena y lo guardamos.\n    sentence += (String.fromCharCode(decValue));\n\n    // Reseteamos el valor decimal para el próximo número binario.\n    decValue = 0;\n  }\n\n  return sentence;\n}\n\n// realizamos el test\nbinaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLno/0">¡En REPL!</a></p>\n<h1>Explicación del código:</h1>\n<ul>\n<li>Para cada cadena binaria comprobamos los unos e ignoramos los ceros.</li>\n<li>Para aquellos que son uno o activo los convertimos en decimal. Esto toma en cuenta la posición y la potencia adecuada a la que tiene que ser elevado.</li>\n<li>Guardamos la potencia en la variable <strong>power</strong> sumándolo a los anteriores unos en la variable <strong>decValue</strong>. Esta variable continuará sumando las potencias de los unos activos hasta el final del bucle y luego retornará un número decimal.</li>\n<li>Convertimos el número decimal final en ASCII y lo añadimos a la variable <strong>sentence</strong> junto con cualquier otra cadena de texto ya convertida y almacenado.</li>\n<li>Restablecemos el valor de la variable <strong>decValue</strong> para evitar decimales equivocadas antes de continuar con el bucle externo.cara</li>\n</ul>\n<h2>Tercera solución:</h2>\n<pre><code>function binaryAgent(str) {\n  return String.fromCharCode(...str.split(" ").map(function(char){ return parseInt(char, 2); }));\n}\n\n// realizamos el test\nbinaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLnp/0">¡En REPL!</a></p>\n<h1>Explicación del código:</h1>\n<ul>\n<li>Primero utilizamos <code>split()</code> para poder trabajar cada carácter como un elemento de matriz.</li>\n<li>Luego utilizamos <code>map()</code> para procesar cada elemento binario a decimal utilizando <code>pareseInt()</code></li>\n<li>Finalmente podemos utilizar <code>String.fromCharCode()</code> para convertir cada número ASCII a su correspondiente carácter.</li>\n<li>Sin embargo <code>fromCharCode()</code> espera una serie de números en lugar de una matriz. Podemos utilizar ES6 Spread Operator para pasar una matriz de números como números individuales. Más información: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator</a></li>\n</ul>\n<h2>Cuarta solución:</h2>\n<pre><code>function binaryAgent(str) {\n  var re = /(\\d+)(\\s?)/g;\n  function convertToChar(match,p1,p2){\n    return String.fromCharCode(parseInt(p1, 2));\n  }\n  return str.replace(re, convertToChar);\n}\n\n// realizamos el test\nbinaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLnr/0">¡En REPL!</a></p>\n<h1>Explicación del código:</h1>\n<ul>\n<li>En esta solución utilizamos <code>String.replace()</code> para encontrar todos los números binarios y los convertimos en caracteres.</li>\n<li>En primer lugar utilizamos una expresión regular para encontrar todos los números binarios y los espacios finales opcionales.</li>\n<li>A continuación, definimos una función que convierte cada primer subcoincidencia a número con <code>parseInt()</code> y luego en un carácter con <code>String.fromCharCode()</code>. Al no utilizar la segunda subcoincidencia dejamos de lado todos los espacios que se encuentran entre cada número binario.</li>\n<li>Por último utilizamos nuestra expresión regular y la función definida como parámetro de <code>String.replace()</code>.</li>\n</ul>\n<blockquote>\n<p><strong>NOTA:</strong> Por favor añade tu nombre de usuario solamente si has añadido <strong>contenido relevante</strong> al artículo. (Por favor no remuevas ningún nombre existente.)</p>\n</blockquote>',frontmatter:{title:"Algoritmo Mensaje Secreto",parent:"/home/stuart/guides/src/pages/articles/miscellaneous/algoritmo-mensaje-secreto/index.md absPath of file"}}},pathContext:{slug:"/articles/miscellaneous/algoritmo-mensaje-secreto/"}}}});
//# sourceMappingURL=path---articles-miscellaneous-algoritmo-mensaje-secreto-f1f5753cf9e29584041f.js.map