webpackJsonp([1197],{"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-javascript-immutable-types.json":function(e,a){e.exports={data:{markdownRemark:{html:'<blockquote>\n<p>Immutable means unchangeable i.e. you can\'t change.</p>\n</blockquote>\n<p>Javascript has lots of immutable types e.g. <code>string</code> primitive type. Try this in your console.</p>\n<pre><code>s = "red";\nconsole.log(s[1]); //→ "e"\ns[1] = "x";\nconsole.log(s) //→ "red"\n</code></pre>\n<p>the <code>s</code> didn\'t change! <a>WAT</a>!</p>\n<h2>Details</h2>\n<p>Some string methods like <code>String.replace</code> returns a new string.</p>\n<p>JavaScript has one complex data type, the Object data type, and it has five simple data types: Number, String, Boolean, Undefined, and Null. These simple (primitive) data types are immutable (cannot be changed), while objects are mutable (can be changed).</p>',frontmatter:{title:"javaScript Immutable Types",parent:"/home/stuart/guides/src/pages/articles/javascript/javascript-immutable-types/index.md absPath of file"}}},pathContext:{slug:"/articles/javascript/javascript-immutable-types/"}}}});
//# sourceMappingURL=path---articles-javascript-javascript-immutable-types-c0f9ed6cf3fdcfe5330a.js.map