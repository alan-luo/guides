{"version":3,"sources":["webpack:///path---articles-python-python-idobject-aef562226e600abb166a.js","webpack:///./.cache/json/articles-python-python-idobject.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-python-python-idobject.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,yFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,inDACAC,aACAC,MAAA,kBACAC,OAAA,4FAIAC,aACAC,KAAA","file":"path---articles-python-python-idobject-aef562226e600abb166a.js","sourcesContent":["webpackJsonp([183],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-idobject.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p><code>id()</code> is a built-in function in Python 3, which returns the <em>identity</em> of an object. The <em>identity</em> is a unique integer for that object during its lifetime. This is also the address of the object in memory.</p>\\n<h2>Argument</h2>\\n<h4>object</h4>\\n<p>The <code>object</code> argument can typically be a <code>int</code>,<code>float</code>,<code>str</code>,<code>list</code>,<code>dict</code>,<code>tuple</code> etc.</p>\\n<h2>Code Sample</h2>\\n<pre><code>a = 2\\nprint(id(a)) #=> 140454723286976 (Values returned by id() might be different for different users)\\n\\nb = 3\\nprint(id(b)) #=> 140454723287008\\n\\nc = 2\\nprint(id(c)) #=> 140454723286976 (This is same as id(a) since they both contain the same value and hence have same memory address)\\n\\nprint(id(a) == id(b)) #=> False (since a and b have different values stored in them)\\nprint(id(a) == id(c)) #=> True (since a and c have same values stored in them)\\n\\nd = 1.1\\ne = 1.1 \\nprint(id(d) == id(e)) #=> True (since d and e have same values stored in them)\\n\\nstr1 = 'hello'\\nstr2 = 'hello'\\nprint(id(str1) == id(str2)) #=> True (since str1 and str2 have same values stored in them)\\n\\n# For complex objects like lists, tuples, dictionaries etc. id() would give a unique integer even if the content of those containers is same.\\ntup1 = (1,1)\\ntup2 = (1,1)\\nprint(id(tup1) == id(tup2)) #=> False\\n</code></pre>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CQw7/1\\\">Run Code</a></p>\\n<p><a href=\\\"https://docs.python.org/3/library/functions.html#id\\\">Official Docs</a></p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Python Idobject\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-idobject/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/python/python-idobject/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-python-python-idobject-aef562226e600abb166a.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p><code>id()</code> is a built-in function in Python 3, which returns the <em>identity</em> of an object. The <em>identity</em> is a unique integer for that object during its lifetime. This is also the address of the object in memory.</p>\\n<h2>Argument</h2>\\n<h4>object</h4>\\n<p>The <code>object</code> argument can typically be a <code>int</code>,<code>float</code>,<code>str</code>,<code>list</code>,<code>dict</code>,<code>tuple</code> etc.</p>\\n<h2>Code Sample</h2>\\n<pre><code>a = 2\\nprint(id(a)) #=> 140454723286976 (Values returned by id() might be different for different users)\\n\\nb = 3\\nprint(id(b)) #=> 140454723287008\\n\\nc = 2\\nprint(id(c)) #=> 140454723286976 (This is same as id(a) since they both contain the same value and hence have same memory address)\\n\\nprint(id(a) == id(b)) #=> False (since a and b have different values stored in them)\\nprint(id(a) == id(c)) #=> True (since a and c have same values stored in them)\\n\\nd = 1.1\\ne = 1.1 \\nprint(id(d) == id(e)) #=> True (since d and e have same values stored in them)\\n\\nstr1 = 'hello'\\nstr2 = 'hello'\\nprint(id(str1) == id(str2)) #=> True (since str1 and str2 have same values stored in them)\\n\\n# For complex objects like lists, tuples, dictionaries etc. id() would give a unique integer even if the content of those containers is same.\\ntup1 = (1,1)\\ntup2 = (1,1)\\nprint(id(tup1) == id(tup2)) #=> False\\n</code></pre>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CQw7/1\\\">Run Code</a></p>\\n<p><a href=\\\"https://docs.python.org/3/library/functions.html#id\\\">Official Docs</a></p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Python Idobject\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-idobject/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/python/python-idobject/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-python-python-idobject.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-python-python-idobject.json\n// module chunks = 183"],"sourceRoot":""}