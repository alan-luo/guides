{"version":3,"sources":["webpack:///path---articles-miscellaneous-store-data-in-web-browsers-storage-7dcb2f61017f7fdc259b.js","webpack:///./.cache/json/articles-miscellaneous-store-data-in-web-browsers-storage.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-store-data-in-web-browsers-storage.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,mHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,45HACAC,aACAC,MAAA,qCACAC,OAAA,sHAIAC,aACAC,KAAA","file":"path---articles-miscellaneous-store-data-in-web-browsers-storage-7dcb2f61017f7fdc259b.js","sourcesContent":["webpackJsonp([257],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-store-data-in-web-browsers-storage.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>In order to manage data handled by your web application, you do not necessarily need a database. The respective Browser Storage features are supported by Chrome (version 4 and higher), Mozilla Firefox (version 3.5 and higher) and Internet Explorer (version 8 and higher), and a range of other browsers including those of iOS and Android.</p>\\n<p>There are two main possibilities for browser storage:</p>\\n<h2>1. localStorage</h2>\\n<p>Any content/data saved to the <code>localStorage</code> object will be available after the browser has been restarted (closed and opened again). In order to <strong><em>save an item</em></strong> to <code>localStorage</code>, you can use the method <code>setItem()</code>. This method must be handed a key and a value.</p>\\n<pre><code>Example: localStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");\\n</code></pre>\\n<p>To <strong><em>retrieve the item from the localStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<pre><code>  Example: localStorage.getItem(\\\"mykey\\\");\\n</code></pre>\\n<p>You can remove an item from <code>localStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<pre><code>  Example: localStorage.removeItem(\\\"mykey\\\");\\n</code></pre>\\n<p>To clear the entire <code>localStorage</code>, you should use the <code>clear()</code> method on the <code>localStorage</code> object:</p>\\n<pre><code>  Example: localStorage.clear();\\n</code></pre>\\n<h2>2. sessionStorage</h2>\\n<p>Items saved in the <code>sessionStorage</code> object will remain until the browser is closed by the user. Then, the storage will be cleared.</p>\\n<p>You can save an item to <code>sessionStorage</code>, please use the method <code>setItem()</code> on the <code>sessionStorage</code> object:</p>\\n<pre><code>Example: sessionStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");\\n</code></pre>\\n<p>To <strong><em>retrieve the item from the sessionStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<pre><code>  Example: sessionStorage.getItem(\\\"mykey\\\");\\n</code></pre>\\n<p>You can remove an item from <code>sessionStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<pre><code>  Example: sessionStorage.removeItem(\\\"mykey\\\");\\n</code></pre>\\n<p>To clear the entire <code>sessionStorage</code>, you should use the <code>clear()</code> method on the <code>sessionStorage</code> object:</p>\\n<pre><code>  Example: sessionStorage.clear();\\n</code></pre>\\n<h2>Saving arrays to localStorage and sessionStorage</h2>\\n<p>You cannot just save single values to the <code>localStorage</code> and <code>sessionStorage</code>, but you can also save the content of an array.</p>\\n<p>In this example, we have an array with numbers:</p>\\n<pre><code>var ourArray =[1,2,3,4,5];\\n</code></pre>\\n<p>We can now save it to <code>localStorage</code> or <code>sessionStorage</code> using the <code>setItem()</code> method:</p>\\n<pre><code>localStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));\\n</code></pre>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<pre><code>sessionStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));\\n</code></pre>\\n<p>In order to be saved, the array must first be converted to a string. In the example shown above, we are using the <code>JSON.stringify</code> method to accomplish this.</p>\\n<p>When retrieving our data from the <code>localStorage</code> or <code>sessionStorage</code>, convert it back to an array:</p>\\n<pre><code>var storedArray = localStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);\\n</code></pre>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<pre><code>var storedArray = sessionStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);\\n</code></pre>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Store Data in Web Browsers Storage\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/miscellaneous/store-data-in-web-browsers-storage/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/miscellaneous/store-data-in-web-browsers-storage/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-miscellaneous-store-data-in-web-browsers-storage-7dcb2f61017f7fdc259b.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>In order to manage data handled by your web application, you do not necessarily need a database. The respective Browser Storage features are supported by Chrome (version 4 and higher), Mozilla Firefox (version 3.5 and higher) and Internet Explorer (version 8 and higher), and a range of other browsers including those of iOS and Android.</p>\\n<p>There are two main possibilities for browser storage:</p>\\n<h2>1. localStorage</h2>\\n<p>Any content/data saved to the <code>localStorage</code> object will be available after the browser has been restarted (closed and opened again). In order to <strong><em>save an item</em></strong> to <code>localStorage</code>, you can use the method <code>setItem()</code>. This method must be handed a key and a value.</p>\\n<pre><code>Example: localStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");\\n</code></pre>\\n<p>To <strong><em>retrieve the item from the localStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<pre><code>  Example: localStorage.getItem(\\\"mykey\\\");\\n</code></pre>\\n<p>You can remove an item from <code>localStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<pre><code>  Example: localStorage.removeItem(\\\"mykey\\\");\\n</code></pre>\\n<p>To clear the entire <code>localStorage</code>, you should use the <code>clear()</code> method on the <code>localStorage</code> object:</p>\\n<pre><code>  Example: localStorage.clear();\\n</code></pre>\\n<h2>2. sessionStorage</h2>\\n<p>Items saved in the <code>sessionStorage</code> object will remain until the browser is closed by the user. Then, the storage will be cleared.</p>\\n<p>You can save an item to <code>sessionStorage</code>, please use the method <code>setItem()</code> on the <code>sessionStorage</code> object:</p>\\n<pre><code>Example: sessionStorage.setItem(\\\"mykey\\\",\\\"myvalue\\\");\\n</code></pre>\\n<p>To <strong><em>retrieve the item from the sessionStorage</em></strong>, the method <code>getItem</code> must be used. The <code>getItem</code> method must be handed the key of the data you would like to retrieve:</p>\\n<pre><code>  Example: sessionStorage.getItem(\\\"mykey\\\");\\n</code></pre>\\n<p>You can remove an item from <code>sessionStorage</code> by using the <code>removeItem()</code> method. This method must be handed the key of the item to be removed:</p>\\n<pre><code>  Example: sessionStorage.removeItem(\\\"mykey\\\");\\n</code></pre>\\n<p>To clear the entire <code>sessionStorage</code>, you should use the <code>clear()</code> method on the <code>sessionStorage</code> object:</p>\\n<pre><code>  Example: sessionStorage.clear();\\n</code></pre>\\n<h2>Saving arrays to localStorage and sessionStorage</h2>\\n<p>You cannot just save single values to the <code>localStorage</code> and <code>sessionStorage</code>, but you can also save the content of an array.</p>\\n<p>In this example, we have an array with numbers:</p>\\n<pre><code>var ourArray =[1,2,3,4,5];\\n</code></pre>\\n<p>We can now save it to <code>localStorage</code> or <code>sessionStorage</code> using the <code>setItem()</code> method:</p>\\n<pre><code>localStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));\\n</code></pre>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<pre><code>sessionStorage.setItem(\\\"ourarraykey\\\",JSON.stringify(ourArray));\\n</code></pre>\\n<p>In order to be saved, the array must first be converted to a string. In the example shown above, we are using the <code>JSON.stringify</code> method to accomplish this.</p>\\n<p>When retrieving our data from the <code>localStorage</code> or <code>sessionStorage</code>, convert it back to an array:</p>\\n<pre><code>var storedArray = localStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);\\n</code></pre>\\n<p>or, for <code>sessionStorage</code>:</p>\\n<pre><code>var storedArray = sessionStorage.getItem(\\\"ourarraykey\\\");\\nourArray = JSON.parse(storedArray);\\n</code></pre>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Store Data in Web Browsers Storage\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/miscellaneous/store-data-in-web-browsers-storage/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/miscellaneous/store-data-in-web-browsers-storage/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-miscellaneous-store-data-in-web-browsers-storage.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-store-data-in-web-browsers-storage.json\n// module chunks = 257"],"sourceRoot":""}