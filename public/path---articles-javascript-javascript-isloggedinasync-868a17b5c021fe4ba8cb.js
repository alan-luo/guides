webpackJsonp([1196],{"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-javascript-isloggedinasync.json":function(e,a){e.exports={data:{markdownRemark:{html:"<p>Let's say you have a public page, but if the user is logged in you want to show special information to them. You'll need to detect if a user is logged in before you make an <em>$http</em> call, right? It's not guaranteed that this will work, because <em>isLoggedIn()</em> is actually an async call. If you want to force something to wait until after <em>isLoggedIn()</em> is successful before it gets called, you should include <em>Auth.isLoggedInAsync</em>:</p>\n<pre><code>$scope.isLoggedInAsync = Auth.isLoggedInAsync;\n</code></pre>\n<p><em>isLoggedInAsync</em> takes a callback function as an input, and passes the callback function a <em>true</em> boolean if the user is logged in, and a <em>false</em> if the user is not. You can call it like so:</p>\n<pre><code>$scope.isLoggedInAsync(callback(bool) {\n    if (bool) { /** do thing if they’re logged in **/ }\n    else { /** do different thing if they’re not logged in **/ }\n});\n</code></pre>",frontmatter:{title:"javaScript Isloggedinasync",parent:"/home/stuart/guides/src/pages/articles/javascript/javascript-isloggedinasync/index.md absPath of file"}}},pathContext:{slug:"/articles/javascript/javascript-isloggedinasync/"}}}});
//# sourceMappingURL=path---articles-javascript-javascript-isloggedinasync-868a17b5c021fe4ba8cb.js.map