{"version":3,"sources":["webpack:///path---articles-javascript-javascript-immutable-types-f862c06c449c22104254.js","webpack:///./.cache/json/articles-javascript-javascript-immutable-types.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-javascript-javascript-immutable-types.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,wGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,0tBACAC,aACAC,MAAA,6BACAC,OAAA,2GAIAC,aACAC,KAAA","file":"path---articles-javascript-javascript-immutable-types-f862c06c449c22104254.js","sourcesContent":["webpackJsonp([1464],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-javascript-immutable-types.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<blockquote>\\n<p>Immutable means unchangeable i.e. you can't change.</p>\\n</blockquote>\\n<p>Javascript has lots of immutable types e.g. <code>string</code> primitive type. Try this in your console.</p>\\n<pre><code>s = \\\"red\\\";\\nconsole.log(s[1]); //→ \\\"e\\\"\\ns[1] = \\\"x\\\";\\nconsole.log(s) //→ \\\"red\\\"\\n</code></pre>\\n<p>the <code>s</code> didn't change! <a>WAT</a>!</p>\\n<h2>Details</h2>\\n<p>Some string methods like <code>String.replace</code> returns a new string.</p>\\n<p>JavaScript has one complex data type, the Object data type, and it has five simple data types: Number, String, Boolean, Undefined, and Null. These simple (primitive) data types are immutable (cannot be changed), while objects are mutable (can be changed).</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"JavaScript Immutable Types\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/javascript/javascript-immutable-types/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/javascript/javascript-immutable-types/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-javascript-javascript-immutable-types-f862c06c449c22104254.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<blockquote>\\n<p>Immutable means unchangeable i.e. you can't change.</p>\\n</blockquote>\\n<p>Javascript has lots of immutable types e.g. <code>string</code> primitive type. Try this in your console.</p>\\n<pre><code>s = \\\"red\\\";\\nconsole.log(s[1]); //→ \\\"e\\\"\\ns[1] = \\\"x\\\";\\nconsole.log(s) //→ \\\"red\\\"\\n</code></pre>\\n<p>the <code>s</code> didn't change! <a>WAT</a>!</p>\\n<h2>Details</h2>\\n<p>Some string methods like <code>String.replace</code> returns a new string.</p>\\n<p>JavaScript has one complex data type, the Object data type, and it has five simple data types: Number, String, Boolean, Undefined, and Null. These simple (primitive) data types are immutable (cannot be changed), while objects are mutable (can be changed).</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"JavaScript Immutable Types\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/javascript/javascript-immutable-types/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/javascript/javascript-immutable-types/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-javascript-javascript-immutable-types.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-javascript-javascript-immutable-types.json\n// module chunks = 1464"],"sourceRoot":""}