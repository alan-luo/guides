{"version":3,"sources":["webpack:///path---articles-java-java-loops-continue-control-statement-cc8ef5fc800f84b318fa.js","webpack:///./.cache/json/articles-java-java-loops-continue-control-statement.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-java-java-loops-continue-control-statement.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,6GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,2gDACAC,aACAC,MAAA,wCACAC,OAAA,gHAIAC,aACAC,KAAA","file":"path---articles-java-java-loops-continue-control-statement-cc8ef5fc800f84b318fa.js","sourcesContent":["webpackJsonp([1542],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-java-java-loops-continue-control-statement.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<h1>Java continue Control Statement</h1>\\n<p>The <code>continue</code> statement makes a loop skip all the following lines after the continue and jump ahead to the beginning of the next iteration. In a <code>for</code> loop, control jumps to the update statement, and in a <code>while</code> or <code>do while</code> loop, control jumps to the boolean expression/condition.</p>\\n<pre><code>for (int j = 0; j &#x3C; 10; j++)\\n{\\n    if (j == 5)\\n    {\\n        continue;\\n    }\\n    System.out.print (j + \\\" \\\");\\n}\\n</code></pre>\\n<p>The value of <code>j</code> will be printed for each iteration, except when it is equal to <code>5</code>. The print statement will get skipped because of the <code>continue</code> and the output will be:</p>\\n<pre><code>0 1 2 3 4 6 7 8 9\\n</code></pre>\\n<p>Say you want to count the number of <code>i</code>s in a the word <code>mississippi</code>. Here you could use a loop with the <code>continue</code> statement, as follows:</p>\\n<pre><code>String searchWord = \\\"mississippi\\\";\\n\\n// max stores the length of the string\\nint max = searchWord.length();\\nint numPs = 0;\\n\\nfor (int i = 0; i &#x3C; max; i++)\\n{\\n    // We only want to count i's - skip other letters\\n    if (searchWord.charAt(i) != 'i')\\n        continue;\\n\\n    // Increase count_i for each i encountered\\n    numPs++;\\n}\\n\\nSystem.out.println(\\\"numPs = \\\" + numPs);\\n</code></pre>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CJZH/0\\\">Run Code</a></p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Java Loops Continue Control Statement\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/java/java-loops-continue-control-statement/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/java/java-loops-continue-control-statement/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-java-java-loops-continue-control-statement-cc8ef5fc800f84b318fa.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<h1>Java continue Control Statement</h1>\\n<p>The <code>continue</code> statement makes a loop skip all the following lines after the continue and jump ahead to the beginning of the next iteration. In a <code>for</code> loop, control jumps to the update statement, and in a <code>while</code> or <code>do while</code> loop, control jumps to the boolean expression/condition.</p>\\n<pre><code>for (int j = 0; j &#x3C; 10; j++)\\n{\\n    if (j == 5)\\n    {\\n        continue;\\n    }\\n    System.out.print (j + \\\" \\\");\\n}\\n</code></pre>\\n<p>The value of <code>j</code> will be printed for each iteration, except when it is equal to <code>5</code>. The print statement will get skipped because of the <code>continue</code> and the output will be:</p>\\n<pre><code>0 1 2 3 4 6 7 8 9\\n</code></pre>\\n<p>Say you want to count the number of <code>i</code>s in a the word <code>mississippi</code>. Here you could use a loop with the <code>continue</code> statement, as follows:</p>\\n<pre><code>String searchWord = \\\"mississippi\\\";\\n\\n// max stores the length of the string\\nint max = searchWord.length();\\nint numPs = 0;\\n\\nfor (int i = 0; i &#x3C; max; i++)\\n{\\n    // We only want to count i's - skip other letters\\n    if (searchWord.charAt(i) != 'i')\\n        continue;\\n\\n    // Increase count_i for each i encountered\\n    numPs++;\\n}\\n\\nSystem.out.println(\\\"numPs = \\\" + numPs);\\n</code></pre>\\n<p><img src=\\\"//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CJZH/0\\\">Run Code</a></p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Java Loops Continue Control Statement\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/java/java-loops-continue-control-statement/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/java/java-loops-continue-control-statement/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-java-java-loops-continue-control-statement.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-java-java-loops-continue-control-statement.json\n// module chunks = 1542"],"sourceRoot":""}