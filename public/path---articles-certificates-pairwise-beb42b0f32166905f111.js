webpackJsonp([1922],{"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-pairwise.json":function(e,t){e.exports={data:{markdownRemark:{html:'<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3" alt=":triangular_flag_on_post:" title=":triangular_flag_on_post:"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3" alt=":busts_in_silhouette:" title=":busts_in_silhouette:"> and write your own code <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3" alt=":pencil:" title=":pencil:"></p>\n<h3><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/checkered_flag.png?v=3" alt=":checkered_flag:" title=":checkered_flag:"> Problem Explanation:</h3>\n<p>The program should look for pairs of numbers in the array whose sum equal the second argument <strong>arg</strong>. Then instead of adding those numbers up, their indices are to be added.</p>\n<p>Remember that arrays start at index 0 and go from there so from [1,4,2,3,0,5] if we switch to their indices it would be [0,1,2,3,4,5]. Then, we add indices 1 + 2 + 3 + 5 and we get 11. That is what we need to return.</p>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>JS For Loops Explained</a></li>\n<li><a>JS Array Prototype Reduce</a></li>\n<li><a>JS Reduce Made Easy</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" alt=":speech_balloon:" title=":speech_balloon:"> Hint: 1</h2>\n<p>Remember to return the smaller sum if multiple are possible. This means <code>([1,1,1], 1)</code> should use <code>0 + 1</code> instead of <code>0 + 1</code> &#x26; <code>1 + 1</code>.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" alt=":speech_balloon:" title=":speech_balloon:"> Hint: 2</h2>\n<p>Try using an array of indices to track whether an index has been used or not.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3" alt=":speech_balloon:" title=":speech_balloon:"> Hint: 3</h2>\n<p>It is easy to confuse indices as being numbers, but since you will be interacting with them, make sure to work with them as integers to prevent the code from behaving erratically.</p>\n<blockquote>\n<p><em>try to solve the problem now</em></p>\n</blockquote>\n<h2>Spoiler Alert!</h2>\n<p><img src="//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif" alt="687474703a2f2f7777772e796f75726472756d2e636f6d2f796f75726472756d2f696d616765732f323030372f31302f31302f7265645f7761726e696e675f7369676e5f322e676966.gif"></p>\n<p><strong>Solution ahead!</strong></p>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3" alt=":beginner:" title=":beginner:"> Basic Code Solution:</h2>\n<pre><code>function pairwise(arr, arg) {\n // Set sum of indices to zero\n var sum = 0;\n // make a local copy of the arguments object so we don\'t modify it directly\n var pairArr = arr.slice();\n // looping from first element\n for(i = 0; i &#x3C; pairArr.length; i++) {\n   //Looping from second element by setting first element  constant\n   for(j = i + 1; j &#x3C; pairArr.length; j++) {\n     // Check whether the sum is equal to arg\n     if(pairArr[i] + pairArr[j] == arg) {\n       //Add the indices\n       sum += i + j;\n       //Set the indices to NaN so that they can\'t be used in next iteration\n       pairArr[i] = pairArr[j] = NaN;\n     }\n   }\n }\n return sum;\n}\n\n// test here\npairwise([1,4,2,3,0,5], 7);\n</code></pre>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLpD/0">Run Code</a></p>\n<h3>Code Explanation:</h3>\n<ul>\n<li>The variable <strong>sum</strong> holds the sum of indices.</li>\n<li>The outer <code>for</code> loop starts from the first element of <strong>arr</strong>.</li>\n<li>The inner <code>for</code> loop starts from the second element of <strong>arr</strong>.</li>\n<li>\n<p>If the sum of an element and the element succeeding it is equal to <strong>arg</strong>:</p>\n<ul>\n<li>The sum of the indices of these elements is added to <strong>sum</strong>.</li>\n<li>These elements are set to <code>NaN</code> so that they\'re not used in the next iteration.</li>\n</ul>\n</li>\n<li>After the loops are completed, the <strong>sum</strong> is returned.</li>\n</ul>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>String.length</a></li>\n<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/NaN">Global NaN property</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/sunflower.png?v=3" alt=":sunflower:" title=":sunflower:"> Intermediate Code Solution:</h2>\n<pre><code>function pairwise(arr, arg) {\n  // Create empty array to keep the arrays we will add.\n  var index = [];\n\n  // Loop to check the first number.\n  for (var a in arr) {\n    // temporal first number.\n    var temp = arr[a];\n\n    // Second loop to check against the first number.\n    for (var i = 1; i &#x3C; arr.length; i++) {\n      // temporal second number.\n      var temp2 = arr[i];\n\n      // Key element, this check to make sure that the numbers add to arg\n      // also that the second index is greater than the first, and that neither\n      // of those indices are already on the array.\n      if (temp + temp2 === arg &#x26;&#x26; i > a &#x26;&#x26; index.indexOf(+a) === -1 &#x26;&#x26; index.indexOf(+i) === -1) {\n        // if true then add both indices as integers then stop checking to avoid repeats.\n        index.push(+a, +i);\n        break;\n      }\n    }\n  }\n\n  // After the two loops are done, check if index is empty to return 0\n  // or if it is not, then use Array.reduce(callbackFunc) to return the sum\n  // of the numbers.\n  if (index.length >= 1) {\n    var addAll = function(a, b) {\n      return a + b;\n    };\n\n    return index.reduce(addAll);\n  } else\n      return 0;\n}\n\n// test here\npairwise([1,4,2,3,0,5], 7);\n</code></pre>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLpC/0">Run Code</a></p>\n<h3>Code Explanation:</h3>\n<ul>\n<li>First, an empty array <strong>index</strong> is created to store the indices that will be added.</li>\n<li>The outer loop gets the first number.</li>\n<li>The inner loop gets the second number.</li>\n<li>\n<p>The following has to be made sure:</p>\n<ul>\n<li>The two numbers add to <strong>arg</strong> that was passed as a parameter to the function.</li>\n<li>The index from the second loop is greater than the one from the first loop. This avoids adding wrong indices.</li>\n<li>The indices are not already part of the <strong>index</strong> array.</li>\n</ul>\n</li>\n<li>If all the conditions are true, the two indices are added as integers using <code>+</code> or <code>parseInt()</code>. The inner loop is hence stopped; everything else would be redundant.</li>\n<li>\n<p>After all the loops are over, it is checked if <strong>index</strong> is empty:</p>\n<ul>\n<li>If it is empty, then 0 is returned.</li>\n<li>Otherwise, the sum of all the integers in it is returned. This is done using the <code>reduce()</code> method.</li>\n</ul>\n</li>\n</ul>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>JS For In Loop</a></li>\n<li><a>JS Array Prototype IndexOf</a></li>\n<li><a>JS Array Prototype Push</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rotating_light.png?v=3" alt=":rotating_light:" title=":rotating_light:"> Advanced Code Solution:</h2>\n<pre><code>function pairwise(arr, arg) {\n  // search array for elements that when paired, equal the second argument, then sum their indices\n  // make a local copy of the arguments object so we don\'t modify it directly\n  var pairArr = arr.slice();\n  return pairArr.reduce( function (a,b,index){ // use native reduce to collect running total of summed indices\n      var search = arg - b; // get difference of current item so we know what value will sum to arg\n\n      // check if search value in rest of the array, but also make sure it doesn\'t match current search index\n  if ( pairArr.indexOf(search) != -1 &#x26;&#x26; pairArr.indexOf(search) != index ){ \n     var total = index + pairArr.indexOf(search);  // if found, add to the runnning total\n     pairArr.splice(index,1,NaN); // remove current index from the array\n     pairArr.splice(pairArr.indexOf(search),1,NaN); // remove the other matched element from the array\n     return a + total; //return the running total back to reduce for next item\n  }\n  return a; // simply return previous total if no operations needed\n  },0);\n}\n// test here\npairwise([1,4,2,3,0,5], 7);\n</code></pre>\n<p><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CLpC/2">Run Code</a></p>\n<h3>Code Explanation:</h3>\n<p>See comments in code<br>\nThis code takes advantage of the fact that the native Array.prototype.indexOf() method will return the lowest index of the value it finds, a requirement of the challenge. Given that you start with the first item in the array (automatically the lowest of it\'s value), you\'re guaranteed to always find the lowest pairs, before removing them from the search space.</p>\n<h4>Relevant Links</h4>\n<ul>\n<li><a>JS Array Prototype Reduce</a></li>\n<li><a>JS Array Prototype IndexOf</a></li>\n<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">JS Array Prototype Splice</a></li>\n<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/NaN">Global NaN property</a></li>\n<li><a>JS Reduce Made Easy</a></li>\n</ul>\n<h2><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3" alt=":clipboard:" title=":clipboard:"> NOTES FOR CONTRIBUTIONS:</h2>\n<ul>\n<li><img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" alt=":warning:" title=":warning:"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\n<li>Add an explanation of your solution.</li>\n<li>Categorize the solution in one of the following categories — <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3" alt=":traffic_light:" title=":traffic_light:"></li>\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src="https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3" alt=":warning:" title=":warning:"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\n</ul>\n<blockquote>\n<p>See <img src="https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3" alt=":point_right:" title=":point_right:"> <a href="http://forum.freecodecamp.com/t/algorithm-article-template/14272"><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\n</blockquote>',frontmatter:{title:"Pairwise",parent:"/home/stuart/guides/src/pages/articles/certificates/pairwise/index.md absPath of file"}}},pathContext:{slug:"/articles/certificates/pairwise/"}}}});
//# sourceMappingURL=path---articles-certificates-pairwise-beb42b0f32166905f111.js.map