{"version":3,"sources":["webpack:///path---articles-python-python-variables-names-and-binding-5c7ca5fdd50410059ccd.js","webpack:///./.cache/json/articles-python-python-variables-names-and-binding.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-python-python-variables-names-and-binding.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,4GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,+nDACAC,aACAC,MAAA,qCACAC,OAAA,+GAIAC,aACAC,KAAA","file":"path---articles-python-python-variables-names-and-binding-5c7ca5fdd50410059ccd.js","sourcesContent":["webpackJsonp([145],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-variables-names-and-binding.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>Having <em>objects</em> isn't useful unless there is a way to use them. In order to use an <em>object</em>, there must be a way to reference them. In Python this is done by <strong>binding</strong> objects to <strong>names</strong>. A detailed overview of can be found <a href=\\\"https://docs.python.org/3/reference/executionmodel.html\\\">here</a></p>\\n<p>One way this is done is by using an <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#assignment-statements\\\"><em>assignment statement</em></a>. This is commonly called <em>assigning a variable</em> in the context of Python. If speaking about programming in the context of other languages, <strong>binding</strong> an <em>object</em> to a <strong>name</strong> may be more precise.</p>\\n<pre><code>>>> some_number = 1\\n>>> print(some_number)\\n1\\n</code></pre>\\n<p>In the example above, the target of the assignment statement is a name (identifier), <code>some_number</code>. The <em>object</em> being assigned is the number 1. The statement <strong>binds</strong> the <em>object</em> to the <strong>name</strong>. The second statement, we use this binding <code>print</code> the <em>object</em> that <code>some_number</code> refers to.</p>\\n<p>The identifier is not preceeded by a <em>type</em>. That is because Python is dynamically-typed language. The identifier is bound to an <em>object</em> that does have a <em>type</em>, however, the identifier itself can be rebound to another <em>object</em> of a different <em>type</em>:</p>\\n<pre><code>>>> some_variable = 1\\n>>> print(some_variable)\\n1\\n>>> some_variable = \\\"Hello campers!\\\"\\n>>> print(some_variable)\\nHello campers!\\n</code></pre>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Python Variables Names and Binding\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-variables-names-and-binding/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/python/python-variables-names-and-binding/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-python-python-variables-names-and-binding-5c7ca5fdd50410059ccd.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>Having <em>objects</em> isn't useful unless there is a way to use them. In order to use an <em>object</em>, there must be a way to reference them. In Python this is done by <strong>binding</strong> objects to <strong>names</strong>. A detailed overview of can be found <a href=\\\"https://docs.python.org/3/reference/executionmodel.html\\\">here</a></p>\\n<p>One way this is done is by using an <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#assignment-statements\\\"><em>assignment statement</em></a>. This is commonly called <em>assigning a variable</em> in the context of Python. If speaking about programming in the context of other languages, <strong>binding</strong> an <em>object</em> to a <strong>name</strong> may be more precise.</p>\\n<pre><code>>>> some_number = 1\\n>>> print(some_number)\\n1\\n</code></pre>\\n<p>In the example above, the target of the assignment statement is a name (identifier), <code>some_number</code>. The <em>object</em> being assigned is the number 1. The statement <strong>binds</strong> the <em>object</em> to the <strong>name</strong>. The second statement, we use this binding <code>print</code> the <em>object</em> that <code>some_number</code> refers to.</p>\\n<p>The identifier is not preceeded by a <em>type</em>. That is because Python is dynamically-typed language. The identifier is bound to an <em>object</em> that does have a <em>type</em>, however, the identifier itself can be rebound to another <em>object</em> of a different <em>type</em>:</p>\\n<pre><code>>>> some_variable = 1\\n>>> print(some_variable)\\n1\\n>>> some_variable = \\\"Hello campers!\\\"\\n>>> print(some_variable)\\nHello campers!\\n</code></pre>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Python Variables Names and Binding\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-variables-names-and-binding/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/python/python-variables-names-and-binding/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-python-python-variables-names-and-binding.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-python-python-variables-names-and-binding.json\n// module chunks = 145"],"sourceRoot":""}