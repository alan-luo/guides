webpackJsonp([434],{"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-backend-file-structures-in-angular.json":function(e,t){e.exports={data:{markdownRemark:{html:"<p>Your app's backend api that interacts with your database is located in <strong>/server/api</strong><br>\nLet's take a look at <strong>/server/api/thing</strong>:</p>\n<ol>\n<li><strong>index.js</strong>: this file routes the $http API requests made from your app's front-end to the appropriate function in <strong>thing.controller.js</strong></li>\n<li><strong>thing.controller.js</strong>: Here is where we actually deal with the database! Take a minute to look through here and figure out what's going on. These functions will: return all items in a collection, return a single item from a collection when passed its id, post an item to a collection, update an item in the collection (this doesn't really work as intended out of the box, we're going to fix that in a minute), and of course, delete an item from the collection.</li>\n<li><strong>thing.model.js</strong>: Here, the actual structure of a <em>thing</em> object is defined. You can add or remove any fields you want from the <em>thing</em> model, and as long as they're syntactically correct they won't break anything, even if there are <em>things</em> with different schemas in your database already. But! You don't just have to edit the <em>thing</em> model to make a new type of collection, because generator-angular-fullstack can do it for you!</li>\n</ol>",frontmatter:{title:"Backend File Structures In Angular",parent:"/home/stuart/guides/src/pages/articles/miscellaneous/backend-file-structures-in-angular/index.md absPath of file"}}},pathContext:{slug:"/articles/miscellaneous/backend-file-structures-in-angular/"}}}});
//# sourceMappingURL=path---articles-miscellaneous-backend-file-structures-in-angular-f918dfe9292962c1afef.js.map