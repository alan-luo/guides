webpackJsonp([480],{"./node_modules/json-loader/index.js!./.cache/json/articles-meta-free-code-camp-javascript-style-guide.json":function(e,n){e.exports={data:{markdownRemark:{html:"<p><small>or How Cool People Write JavaScript.</small></p>\n<h2>Indent</h2>\n<p>Always Use Two Spaces<br>\nNo hard tabs, ever. No really, just don't do it.</p>\n<h2>Curly Braces</h2>\n<p>Always use curly braces when using the keywords <code>if/else/else if</code>. This prevents a lot of ambiguity and will prevent syntax errors in some edge cases.</p>\n<p>Bad:</p>\n<pre><code>if (foo) bar();\n</code></pre>\n<p>Good:</p>\n<pre><code>if (foo) { bar(); }\n</code></pre>\n<h2>Curly Braces Everywhere!</h2>\n<p>Space After <code>function</code> Keyword, Except in Anonymous Functions</p>\n<p>Good:</p>\n<pre><code>function foo() {\n}\n\nvar foo = function() {\n  // ...\n};\n</code></pre>\n<p>Bad:</p>\n<pre><code>function foo ()\n{\n  // ...\n}\n\nvar foo = function () {\n  // ...\n};\n</code></pre>\n<h2>Comments</h2>\n<ul>\n<li>no inline comments</li>\n<li>single space after <code>//</code></li>\n<li>Do not use multiline comment <code>/* */</code>, we are reserving these for use with jsDocs.</li>\n</ul>\n<h2>Keywords</h2>\n<ul>\n<li>space immediately after if, else, while, etc</li>\n<li>opening curly brace should always be on the same line.</li>\n</ul>\n<p>Good:</p>\n<pre><code>if (true) {\n // do the thing\n}\n</code></pre>\n<p>Bad:</p>\n<pre><code>if(true)\n{\n // do the thing\n}\n</code></pre>\n<h2>Else</h2>\n<p>Avoid else and \"end early\". In JavaScript there is often a lot of indenting (usually when dealing with async code and named \"callback hell\"). Anything you can do reduce the number of indents should be done. One thing is to <a href=\"http://blog.timoxley.com/post/47041269194/avoid-else-return-early\">avoid the else</a> keyword.</p>\n<p>This also has the side effect of making code cleaner and easier to read.</p>\n<p>Bad:</p>\n<pre><code>someAsynFunc(function(err, data) {\n  if (err) {\n    callback(err);\n  } else {\n    // do stuff with data\n  }\n});\n</code></pre>\n<p>Good:</p>\n<pre><code>someAsynFunc(function(err, data) {\n  if (err) {\n    return callback(err);\n  }\n  // do stuff with data\n  // saves one indent\n});\n</code></pre>\n<h2>Long Strings</h2>\n<p>Long multiline strings should be in one of two forms:</p>\n<pre><code>var longString =\n  ‘long strings should ‘ +\n  ‘be in this form, with the ‘ +\n  ‘operator ending the line’;\n\nvar foo = 'bar';\n\nvar longString = [\n  'long strings with variables such as ',\n  foo,\n  'should ',\n  'be in this form, an array of strings ',\n  'that are joined with the join array instance method',\n].join('');\n</code></pre>\n<p>...more to come</p>",frontmatter:{title:"Free Code Camp javaScript Style Guide",parent:"/home/stuart/guides/src/pages/articles/meta/free-code-camp-javascript-style-guide/index.md absPath of file"}}},pathContext:{slug:"/articles/meta/free-code-camp-javascript-style-guide/"}}}});
//# sourceMappingURL=path---articles-meta-free-code-camp-javascript-style-guide-bd09be07724a3ab45aca.js.map