webpackJsonp([2192],{"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-vs-local-scope-in-functions.json":function(e,o){e.exports={data:{markdownRemark:{html:'<p>It is possible to have both <code>local</code> and <code>global</code> variables with the same name. When you do this, the local variable takes precedence over the <code>global</code> variable.</p>\n<p>In this example:</p>\n<pre><code>var someVar = "Hat";\nfunction myOutfit() {\n  var someVar = "Head";\n  return someVar;\n}\n</code></pre>\n<p>The function <code>myOutfit</code> will return <code>"Head"</code> because the <code>local</code> version of the variable is present.</p>',frontmatter:{title:"Global Vs Local Scope in Functions",parent:"/home/stuart/guides/src/pages/articles/certificates/global-vs-local-scope-in-functions/index.md absPath of file"}}},pathContext:{slug:"/articles/certificates/global-vs-local-scope-in-functions/"}}}});
//# sourceMappingURL=path---articles-certificates-global-vs-local-scope-in-functions-e9e7beaf6ef479b89935.js.map