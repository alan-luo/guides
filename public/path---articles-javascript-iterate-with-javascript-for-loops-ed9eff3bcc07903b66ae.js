webpackJsonp([1497],{"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-iterate-with-javascript-for-loops.json":function(e,o){e.exports={data:{markdownRemark:{html:"<p>The most common type of JavaScript loop is called a <code>for loop</code> because it runs <code>for</code> a specific number of times.</p>\n<pre><code>var ourArray = [];\nfor(var i = 0; i &#x3C; 5; i++) {\n  ourArray.push(i);\n}\n</code></pre>\n<p>ourArray will now contain [0,1,2,3,4]</p>\n<h2>More about for loops</h2>\n<pre><code>for(var i = 0; i &#x3C; 5; i++) {  // There are 3 parts here\n</code></pre>\n<p>There are three parts to for loop. They are separated by semicolons.</p>\n<ol>\n<li>\n<p>The initialization: <code>var i = 0;</code> - This code runs only once at the start of the loop. It's usually used to declare the counter variable (with <code>var</code>) and initialize the counter (in this case it is set to 0).</p>\n</li>\n<li>\n<p>The condition: <code>i &#x3C; 5;</code> - The loop will run as long as this is <code>true</code>. That means that as soon as <code>i</code> is equal to 5, the loop will stop looping. Note that the inside of the loop will never see <code>i</code> as 5 because it will stop before then. If this condition is initially <code>false</code>, the loop will never execute.</p>\n</li>\n<li>\n<p>The increment: <code>i++</code> - This code is run at the end of each loop. It's usually a simple increment (<code>++</code> operator), but can really be any mathematical transformation. It is used to move the counter (<code>i</code>) forward (or backwards, or whatever.</p>\n</li>\n</ol>",frontmatter:{title:"Iterate with JavaScript for Loops",parent:"/home/stuart/guides/src/pages/articles/javascript/iterate-with-javascript-for-loops/index.md absPath of file"}}},pathContext:{slug:"/articles/javascript/iterate-with-javascript-for-loops/"}}}});
//# sourceMappingURL=path---articles-javascript-iterate-with-javascript-for-loops-ed9eff3bcc07903b66ae.js.map