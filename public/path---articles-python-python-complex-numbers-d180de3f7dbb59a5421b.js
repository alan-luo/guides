webpackJsonp([196],{"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-complex-numbers.json":function(e,n){e.exports={data:{markdownRemark:{html:"<p>Complex numbers have a real and an imaginary part, each represented by a floating point number.</p>\n<p>The imaginary part of a complex number can be created using an imaginary literal, this results in a complex number with a real part of <code>0.0</code>:</p>\n<pre><code>>>> a = 3.5j\n>>> type(a)\n&#x3C;class 'complex'>\n>>> print(a)\n3.5j\n>>> a.real\n0.0\n>>> a.imag\n3.5\n</code></pre>\n<p>No literal exists for creating a complex number with non-zero real and imaginary parts. To create a non-zero real part complex number, add an imaginary literal to a floating point number:</p>\n<pre><code>>>> a = 1.1 + 3.5j\n>>> type(a)\n&#x3C;class 'complex'>\n>>> print(a)\n(1.1+3.5j)\n>>> a.real\n1.1\n>>> a.imag\n3.5\n</code></pre>\n<p>Or use the <a href=\"https://docs.python.org/3/library/functions.html#complex\">complex constructor</a>.</p>\n<pre><code>class complex([real[, imag]])\n</code></pre>\n<p>The arguments used to call the complex constructor can be of numeric (including <code>complex</code>) type for either parameter:</p>\n<pre><code>>>> complex(1, 1)\n(1+1j)\n>>> complex(1j, 1j)\n(-1+1j)\n>>> complex(1.1, 3.5)\n(1.1+3.5j)\n>>> complex(1.1)\n(1.1+0j)\n>>> complex(0, 3.5)\n3.5j\n</code></pre>\n<p>A <code>string</code> can also be used as the argument. No second argument is allowed if a string is used as an argument</p>\n<pre><code>>>> complex(\"1.1+3.5j\")\n(1.1+3.5j)\n</code></pre>",frontmatter:{title:"Python Complex Numbers",parent:"/home/stuart/guides/src/pages/articles/python/python-complex-numbers/index.md absPath of file"}}},pathContext:{slug:"/articles/python/python-complex-numbers/"}}}});
//# sourceMappingURL=path---articles-python-python-complex-numbers-d180de3f7dbb59a5421b.js.map