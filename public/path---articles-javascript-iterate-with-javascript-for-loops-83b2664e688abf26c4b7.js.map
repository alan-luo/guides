{"version":3,"sources":["webpack:///path---articles-javascript-iterate-with-javascript-for-loops-83b2664e688abf26c4b7.js","webpack:///./.cache/json/articles-javascript-iterate-with-javascript-for-loops.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-javascript-iterate-with-javascript-for-loops.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,+GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,w5CACAC,aACAC,MAAA,oCACAC,OAAA,kHAIAC,aACAC,KAAA","file":"path---articles-javascript-iterate-with-javascript-for-loops-83b2664e688abf26c4b7.js","sourcesContent":["webpackJsonp([1262],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-iterate-with-javascript-for-loops.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>The most common type of JavaScript loop is called a <code>for loop</code> because it runs <code>for</code> a specific number of times.</p>\\n<pre><code>var ourArray = [];\\nfor(var i = 0; i &#x3C; 5; i++) {\\n  ourArray.push(i);\\n}\\n</code></pre>\\n<p>ourArray will now contain [0,1,2,3,4]</p>\\n<h2>More about for loops</h2>\\n<pre><code>for(var i = 0; i &#x3C; 5; i++) {  // There are 3 parts here\\n</code></pre>\\n<p>There are three parts to for loop. They are separated by semicolons.</p>\\n<ol>\\n<li>\\n<p>The initialization: <code>var i = 0;</code> - This code runs only once at the start of the loop. It's usually used to declare the counter variable (with <code>var</code>) and initialize the counter (in this case it is set to 0).</p>\\n</li>\\n<li>\\n<p>The condition: <code>i &#x3C; 5;</code> - The loop will run as long as this is <code>true</code>. That means that as soon as <code>i</code> is equal to 5, the loop will stop looping. Note that the inside of the loop will never see <code>i</code> as 5 because it will stop before then. If this condition is initially <code>false</code>, the loop will never execute.</p>\\n</li>\\n<li>\\n<p>The increment: <code>i++</code> - This code is run at the end of each loop. It's usually a simple increment (<code>++</code> operator), but can really be any mathematical transformation. It is used to move the counter (<code>i</code>) forward (or backwards, or whatever.</p>\\n</li>\\n</ol>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Iterate with javaScript for Loops\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/javascript/iterate-with-javascript-for-loops/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/javascript/iterate-with-javascript-for-loops/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-javascript-iterate-with-javascript-for-loops-83b2664e688abf26c4b7.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>The most common type of JavaScript loop is called a <code>for loop</code> because it runs <code>for</code> a specific number of times.</p>\\n<pre><code>var ourArray = [];\\nfor(var i = 0; i &#x3C; 5; i++) {\\n  ourArray.push(i);\\n}\\n</code></pre>\\n<p>ourArray will now contain [0,1,2,3,4]</p>\\n<h2>More about for loops</h2>\\n<pre><code>for(var i = 0; i &#x3C; 5; i++) {  // There are 3 parts here\\n</code></pre>\\n<p>There are three parts to for loop. They are separated by semicolons.</p>\\n<ol>\\n<li>\\n<p>The initialization: <code>var i = 0;</code> - This code runs only once at the start of the loop. It's usually used to declare the counter variable (with <code>var</code>) and initialize the counter (in this case it is set to 0).</p>\\n</li>\\n<li>\\n<p>The condition: <code>i &#x3C; 5;</code> - The loop will run as long as this is <code>true</code>. That means that as soon as <code>i</code> is equal to 5, the loop will stop looping. Note that the inside of the loop will never see <code>i</code> as 5 because it will stop before then. If this condition is initially <code>false</code>, the loop will never execute.</p>\\n</li>\\n<li>\\n<p>The increment: <code>i++</code> - This code is run at the end of each loop. It's usually a simple increment (<code>++</code> operator), but can really be any mathematical transformation. It is used to move the counter (<code>i</code>) forward (or backwards, or whatever.</p>\\n</li>\\n</ol>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Iterate with javaScript for Loops\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/javascript/iterate-with-javascript-for-loops/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/javascript/iterate-with-javascript-for-loops/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-javascript-iterate-with-javascript-for-loops.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-javascript-iterate-with-javascript-for-loops.json\n// module chunks = 1262"],"sourceRoot":""}