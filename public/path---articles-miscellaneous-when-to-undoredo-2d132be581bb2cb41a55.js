webpackJsonp([219],{"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-when-to-undoredo.json":function(e,o){e.exports={data:{markdownRemark:{html:'<p>You would typically want to UNDO/REDO when you commit some changes to git, and realize that the changes need to be removed/reverted. This very common in scenarios for example, when you did a temporary change to some files, and forgot to revert them, then proceeded to adding them to commit accidentally.</p>\n<h2>The UNDO/REDO workflow:</h2>\n<p>Assuming you did some changes and made commits like:</p>\n<pre><code>git commit -m "Commit 1 - Some changes to the code"\ngit commit -m "Commit 2 - Some MORE changes to the code"\n</code></pre>\n<ol>\n<li>(UNDO-ing): Revert back the last commit <code>git reset --soft HEAD~</code></li>\n<li><em>Do the changes.</em></li>\n<li>Add your files to the staging area <code>git add &#x3C;filenames or paths></code> or <code>git add --all</code></li>\n<li>(REDO-ing): Do the commit. <code>git commit -c ORIG_HEAD</code> or <code>git commit -C ORIG_HEAD</code></li>\n</ol>\n<h2>How does this work?</h2>\n<p>Now that you know the flow lets understand how this works behind the scenes.</p>\n<ol>\n<li><code>Step 1</code> resets the last commit i.e. <code>"Commit 2 - Some MORE..."</code> back to the <code>"Commit 1 - Some..."</code> commit.</li>\n<li>In <code>Step 2</code>, you do changes you deem fit to the files.</li>\n<li>In <code>Step 3</code>, you add the changed files to the staging area either selectively with <code>git add &#x3C;filenames></code> or all files with <code>git add --all</code>.</li>\n<li>In the final step you commit the changes in the staging area.</li>\n</ol>\n<p>Note: you can either use <code>-c</code> or <code>-C</code>. The small <code>-c</code> will open an editor for modifying the commit message, in this case it will be <code>Commit 2 - Some MORE...</code>. You can edit the commit message as you want.</p>\n<p>Or alternatively you can use caps <code>-C</code>, where git will skip the editor window, and reuse the <em>LAST</em> commit message which again in this case is <code>Commit 2 - Some MORE...</code>.</p>\n<p>Re-using the "Same" commit message is also known as redoing/recommiting.</p>\n<h2>Unstage before a commit</h2>\n<p>To undo a change staged before a commit simply run <code>git reset &#x3C;file></code> or <code>git reset</code> to unstage all changes before a commit.</p>\n<p>Note: In older versions of git, the commands were <code>git reset HEAD &#x3C;file></code> and <code>git reset HEAD</code> respectively. This was changed in Git 1.8.2</p>\n<h2>Some More tricks:</h2>\n<p>You can go back any number of commits by using <code>git reset --soft HEAD~n</code> where you want to undo last <code>n</code> commits.</p>\n<h2>Attribution:</h2>\n<p>This article is based on a Stack Overflow question <a href="http://stackoverflow.com/questions/927358/how-do-you-undo-the-last-commit/927386#927386">here</a> and <a href="http://stackoverflow.com/questions/348170/undo-git-add-before-commit/348234#348234">here</a>.</p>',frontmatter:{title:"When To Undoredo",parent:"/home/stuart/guides/src/pages/articles/miscellaneous/when-to-undoredo/index.md absPath of file"}}},pathContext:{slug:"/articles/miscellaneous/when-to-undoredo/"}}}});
//# sourceMappingURL=path---articles-miscellaneous-when-to-undoredo-2d132be581bb2cb41a55.js.map