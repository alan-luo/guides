{"version":3,"sources":["webpack:///path---articles-certificates-understanding-uninitialized-variables-322aec77a8915fa44448.js","webpack:///./.cache/json/articles-certificates-understanding-uninitialized-variables.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-certificates-understanding-uninitialized-variables.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,qHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,odACAC,aACAC,MAAA,wCACAC,OAAA,wHAIAC,aACAC,KAAA","file":"path---articles-certificates-understanding-uninitialized-variables-322aec77a8915fa44448.js","sourcesContent":["webpackJsonp([2077],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-understanding-uninitialized-variables.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an undefined variable your result will be <code>NaN</code> which means \\\"Not a Number\\\". If you concatenate a string with an undefined variable, you will get a literal string of \\\"undefined\\\".</p>\\n<p>Basically this means that before you do any operations with them you <strong>must</strong> assign an initial value at some point.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Understanding Uninitialized Variables\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/understanding-uninitialized-variables/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/certificates/understanding-uninitialized-variables/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-certificates-understanding-uninitialized-variables-322aec77a8915fa44448.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an undefined variable your result will be <code>NaN</code> which means \\\"Not a Number\\\". If you concatenate a string with an undefined variable, you will get a literal string of \\\"undefined\\\".</p>\\n<p>Basically this means that before you do any operations with them you <strong>must</strong> assign an initial value at some point.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Understanding Uninitialized Variables\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/understanding-uninitialized-variables/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/certificates/understanding-uninitialized-variables/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-certificates-understanding-uninitialized-variables.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-certificates-understanding-uninitialized-variables.json\n// module chunks = 2077"],"sourceRoot":""}