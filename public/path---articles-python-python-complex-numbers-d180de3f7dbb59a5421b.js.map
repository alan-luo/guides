{"version":3,"sources":["webpack:///path---articles-python-python-complex-numbers-d180de3f7dbb59a5421b.js","webpack:///./.cache/json/articles-python-python-complex-numbers.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-python-python-complex-numbers.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,gGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,k4CACAC,aACAC,MAAA,yBACAC,OAAA,mGAIAC,aACAC,KAAA","file":"path---articles-python-python-complex-numbers-d180de3f7dbb59a5421b.js","sourcesContent":["webpackJsonp([196],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-complex-numbers.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>Complex numbers have a real and an imaginary part, each represented by a floating point number.</p>\\n<p>The imaginary part of a complex number can be created using an imaginary literal, this results in a complex number with a real part of <code>0.0</code>:</p>\\n<pre><code>>>> a = 3.5j\\n>>> type(a)\\n&#x3C;class 'complex'>\\n>>> print(a)\\n3.5j\\n>>> a.real\\n0.0\\n>>> a.imag\\n3.5\\n</code></pre>\\n<p>No literal exists for creating a complex number with non-zero real and imaginary parts. To create a non-zero real part complex number, add an imaginary literal to a floating point number:</p>\\n<pre><code>>>> a = 1.1 + 3.5j\\n>>> type(a)\\n&#x3C;class 'complex'>\\n>>> print(a)\\n(1.1+3.5j)\\n>>> a.real\\n1.1\\n>>> a.imag\\n3.5\\n</code></pre>\\n<p>Or use the <a href=\\\"https://docs.python.org/3/library/functions.html#complex\\\">complex constructor</a>.</p>\\n<pre><code>class complex([real[, imag]])\\n</code></pre>\\n<p>The arguments used to call the complex constructor can be of numeric (including <code>complex</code>) type for either parameter:</p>\\n<pre><code>>>> complex(1, 1)\\n(1+1j)\\n>>> complex(1j, 1j)\\n(-1+1j)\\n>>> complex(1.1, 3.5)\\n(1.1+3.5j)\\n>>> complex(1.1)\\n(1.1+0j)\\n>>> complex(0, 3.5)\\n3.5j\\n</code></pre>\\n<p>A <code>string</code> can also be used as the argument. No second argument is allowed if a string is used as an argument</p>\\n<pre><code>>>> complex(\\\"1.1+3.5j\\\")\\n(1.1+3.5j)\\n</code></pre>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Python Complex Numbers\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-complex-numbers/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/python/python-complex-numbers/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-python-python-complex-numbers-d180de3f7dbb59a5421b.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>Complex numbers have a real and an imaginary part, each represented by a floating point number.</p>\\n<p>The imaginary part of a complex number can be created using an imaginary literal, this results in a complex number with a real part of <code>0.0</code>:</p>\\n<pre><code>>>> a = 3.5j\\n>>> type(a)\\n&#x3C;class 'complex'>\\n>>> print(a)\\n3.5j\\n>>> a.real\\n0.0\\n>>> a.imag\\n3.5\\n</code></pre>\\n<p>No literal exists for creating a complex number with non-zero real and imaginary parts. To create a non-zero real part complex number, add an imaginary literal to a floating point number:</p>\\n<pre><code>>>> a = 1.1 + 3.5j\\n>>> type(a)\\n&#x3C;class 'complex'>\\n>>> print(a)\\n(1.1+3.5j)\\n>>> a.real\\n1.1\\n>>> a.imag\\n3.5\\n</code></pre>\\n<p>Or use the <a href=\\\"https://docs.python.org/3/library/functions.html#complex\\\">complex constructor</a>.</p>\\n<pre><code>class complex([real[, imag]])\\n</code></pre>\\n<p>The arguments used to call the complex constructor can be of numeric (including <code>complex</code>) type for either parameter:</p>\\n<pre><code>>>> complex(1, 1)\\n(1+1j)\\n>>> complex(1j, 1j)\\n(-1+1j)\\n>>> complex(1.1, 3.5)\\n(1.1+3.5j)\\n>>> complex(1.1)\\n(1.1+0j)\\n>>> complex(0, 3.5)\\n3.5j\\n</code></pre>\\n<p>A <code>string</code> can also be used as the argument. No second argument is allowed if a string is used as an argument</p>\\n<pre><code>>>> complex(\\\"1.1+3.5j\\\")\\n(1.1+3.5j)\\n</code></pre>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Python Complex Numbers\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-complex-numbers/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/python/python-complex-numbers/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-python-python-complex-numbers.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-python-python-complex-numbers.json\n// module chunks = 196"],"sourceRoot":""}