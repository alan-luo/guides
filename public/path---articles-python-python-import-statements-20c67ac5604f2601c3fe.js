webpackJsonp([181],{"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-import-statements.json":function(e,t){e.exports={data:{markdownRemark:{html:'<p>While learning programming and reading some resources you\'d have come across this word \'abstraction\' which simply means to reduce and reuse the code as much as possible.</p>\n<p>Functions and Modules facilitate abstraction. You create functions when you want to do something repeatedly within a file.</p>\n<p>Modules come into picture when you want to reuse a group of functions in different source files. Modules are also useful in structuring the program well.</p>\n<ul>\n<li>Using Standard Libraries and other third party modules:</li>\n<li>Structuring the program</li>\n</ul>\n<h2>Using Standard Libraries</h2>\n<p>Example: You can read about the methods/functions of all the standard libraries in the official Python Docs in detail.</p>\n<pre><code>import time\nfor i in range(100):\n    time.sleep(1)   # Waits for 1 second and then executes the next command\n    print(str(i) + \' seconds have passed\')  # prints the number of seconds passed after the program was started\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CS6C">Run Code</a></p>\n<pre><code># To calculate the execution time of a part of program\nimport time\nstart = time.time()\n# code here\nend = time.time()\nprint(\'Execution time:\' , end-start)\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CS6C/1">Run Code</a></p>\n<pre><code># Using math Module\nimport math\nprint(math.sqrt(100))   # prints 10\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CS6C/2">Run Code</a></p>\n<h2>Using third party Modules</h2>\n<p>Third party modules don\'t come bundled with python , but we have to install it externally using package managers like <a href="https://bootstrap.pypa.io/get-pip.py"><code>pip</code></a> and <a href="https://bootstrap.pypa.io/ez_setup.py"><code>easy install</code></a></p>\n<pre><code># To make http requests\nimport requests\nrq = requests.get(target_url)\nprint(rq.status_code)\n</code></pre>\n<p>Find out more about python-requests module <a href="http://docs.python-requests.org/en/master/">here</a></p>\n<h2>To structure programs</h2>\n<p>We want to make a program that has various functions regarding prime numbers. So lets start. We will define all the functions in <code>prime_functions.py</code></p>\n<pre><code># prime_functions.py\nfrom math import ceil, sqrt\ndef isPrime(a):\n    if a == 2:\n        return True\n    elif a % 2 == 0:\n        return False\n    else:\n        for i in range(3,ceil(sqrt(a)) + 1,2):\n            if a % i == 0:\n                return False\n        return True\n\ndef print_n_primes(a):\n    i = 0\n    m = 2\n    while True:\n        if isPrime(m) ==True:\n            print(m)\n            i += 1\n        m += 1\n        if i == a:\n            break\n</code></pre>\n<p>Now we want to use the functions that we just created in <code>prime_functions.py</code> so we create a new file <code>playground.py</code> to use those functions.</p>\n<blockquote>\n<p><em>Please note that this program is far too simple to make two separate files, it is just to demonstrate. But when there are large complex programs, making different files is really useful.</em></p>\n</blockquote>\n<pre><code># playground.py\nimport prime_functions\nprint(prime_functions.isPrime(29)) # returns True\n</code></pre>',frontmatter:{title:"Python Import Statements",parent:"/home/stuart/guides/src/pages/articles/python/python-import-statements/index.md absPath of file"}}},pathContext:{slug:"/articles/python/python-import-statements/"}}}});
//# sourceMappingURL=path---articles-python-python-import-statements-20c67ac5604f2601c3fe.js.map