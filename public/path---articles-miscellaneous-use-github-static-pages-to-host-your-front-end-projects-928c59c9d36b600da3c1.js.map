{"version":3,"sources":["webpack:///path---articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects-928c59c9d36b600da3c1.js","webpack:///./.cache/json/articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,wIACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,4yMACAC,aACAC,MAAA,0DACAC,OAAA,2IAIAC,aACAC,KAAA","file":"path---articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects-928c59c9d36b600da3c1.js","sourcesContent":["webpackJsonp([240],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p><strong>Benefits</strong></p>\\n<p>I love Codepen.io, it's a wonderful, easy-to-use tool for simple front-end experimentation. But as the fcc projects got more complex, I realized coding locally was going to save me a bunch of headaches. My text-editor and <a href=\\\"https://incident57.com/codekit/\\\">codekit</a> combo are just waaay faster.</p>\\n<ul>\\n<li>Autocomplete</li>\\n<li>Compile everything (codepen was really dragging trying to compile Jade)</li>\\n<li>Better auto-refresh</li>\\n<li>Built in bower</li>\\n<li>Git versioning</li>\\n<li>Improved screen real-estate experience</li>\\n</ul>\\n<h2>Git to Github</h2>\\n<p>Since I'm already saving locally, and using git for version control, I figured might as well upload to Github. Plus, Github has a fantastic, free service for front-end projects called <a href=\\\"https://pages.github.com/\\\">Github Pages</a>. Just update your repo and your changes are live.</p>\\n<p>How it works is simple. Github checks if your repository has a branch called <code>gh-pages</code> and serves any code that's sitting in that branch. No back-end stuff here, but HTML, CSS and JS work like a charm.</p>\\n<h2>First things first</h2>\\n<p>Let's make a new folder for your project. I'll use the <a href=\\\"http://www.freecodecamp.com/challenges/stylize-stories-on-camper-news\\\">Camper News</a> project as my example.</p>\\n<p>Got to your work directory and make a new one. You can do this in the terminal (or not).</p>\\n<div class=\\\"lightbox-wrapper\\\">[![Project Directory](//discourse-user-assets.s3.amazonaws.com/optimized/2X/2/2e3faaa2752657c592a9991ceed29a0200f332e6_1_690x387.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">Fullscreen_10_29_15__12_06_PM.png</span><span class=\\\"informations\\\">1366x768 174 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/2/2e3faaa2752657c592a9991ceed29a0200f332e6.png \\\"Fullscreen_10_29_15__12_06_PM.png\\\") </div>\\n<p>Now, go into the project directory, and (for sure in the terminal this time) use the command <code>git init</code>. Note, this tutorial assumes <a href=\\\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\\\">you have git installed</a>.</p>\\n<p>Alright, awesome. Now we're ready to work.</p>\\n<h2>Next steps</h2>\\n<p>Create some files in your campNews directory. I don't know, maybe an index.html and probably app.css and app.js, or whatever naming convention you prefer. Put your code in these files. Alright, now we're ready for our first commit. It takes <strong>two steps</strong>.</p>\\n<ol>\\n<li><code>git add -A</code> will prep all these new files and the new code inside them</li>\\n<li><code>git commit -m 'relevant message'</code> will commit all the work you've done to the branch you're currently on ('master' by default)</li>\\n</ol>\\n<h2>The key to this whole thing</h2>\\n<p>OK, so far we're still local. There's some stuff we gotta do to take our work and move it to github. It's at this point I like to switch branches. Remember - github only serves from gh-pages, and if you've followed along so far, your branch is called 'master'. Let's make a new (local) gh-pages branch.</p>\\n<p><code>git checkout -b gh-pages</code> will create it, copy all the work from master into gh-pages and switch me over to the branch. Phew.</p>\\n<p><code>git branch -d master</code> will get rid of the master branch. Sounds crazy I know, but what do we need it for? Just think of gh-pages as your NEW master branch.</p>\\n<p>Now, <code>git add -A</code> and <code>git commit -m 'relevant message'</code> again, just in case. And be prepared to leave your editor and terminal and go online for the first time.</p>\\n<p>Go to your github profile and create a new repo. Name it something relevant, like campNews.</p>\\n<div class=\\\"lightbox-wrapper\\\">[![New Repo](//discourse-user-assets.s3.amazonaws.com/optimized/2X/3/3f113af87b94fcd649c78d5f6d36463795671e7b_1_690x387.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">Fullscreen_10_29_15__12_49_PM.png</span><span class=\\\"informations\\\">1366x768 314 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/3/3f113af87b94fcd649c78d5f6d36463795671e7b.png \\\"Fullscreen_10_29_15__12_49_PM.png\\\") </div>\\n<p>Once it's created, go in and grab the HTTPS clone URL. (Ignore the files in my screenshot, your repo will be empty at this point).</p>\\n<div class=\\\"lightbox-wrapper\\\">[![clone url](//discourse-user-assets.s3.amazonaws.com/optimized/2X/a/a0f3da26ba0802342d7d6f7890763a2bca32b62a_1_690x387.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">Fullscreen_10_29_15__12_51_PM.png</span><span class=\\\"informations\\\">1366x768 218 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/a/a0f3da26ba0802342d7d6f7890763a2bca32b62a.png \\\"Fullscreen_10_29_15__12_51_PM.png\\\") </div>\\n<h2>Putting it all together</h2>\\n<p>And you can leave the online world. Back to the terminal! Let's connect our local project to this github repo. All it takes is one command.</p>\\n<p><code>git remote add origin &#x3C;server></code> Just replace server with the HTTPS url you just copied. So my command looks like this:</p>\\n<p><code>git remote add origin https://github.com/gkobilansky/campNews.git</code>.</p>\\n<p>OK, so far we've:</p>\\n<ol>\\n<li>Created our project</li>\\n<li>Versioned it in git</li>\\n<li>Commited some changes</li>\\n<li>Switched it to the 'gh-pages' branch</li>\\n<li>Connected it to github</li>\\n</ol>\\n<h2>Last step!</h2>\\n<p>Push you project to github. Again, simple:</p>\\n<p><code>git push origin gh-pages</code></p>\\n<p>That command will make sure your latest commits get uploaded to github. Once you've done this at least once, your project should be available <a><a href=\\\"http://_username_.github.io/_repository_\\\">http://<em>username</em>.github.io/<em>repository</em></a></a>, so for me it's <a href=\\\"http://gkobilansky.github.io/campNews\\\">http://gkobilansky.github.io/campNews</a>.</p>\\n<p>Once this is all done, the process just repeats itself:</p>\\n<ol>\\n<li><code>git add -A</code></li>\\n<li><code>git commit -m 'relevant message'</code></li>\\n<li><code>git push origin gh-pages</code></li>\\n</ol>\\n<p>Granted, steeper learning curve than codepen.io, but faster and more flexible once you get the hang of it.</p>\\n<p>Happy coding!</p>\\n<p>PS. Thanks to <a href=\\\"http://rogerdudler.github.io/git-guide/\\\">this guide</a> by Roger Dudler for keeping things simple.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Use Github Static Pages to Host Your Front End Projects\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/miscellaneous/use-github-static-pages-to-host-your-front-end-projects/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/miscellaneous/use-github-static-pages-to-host-your-front-end-projects/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects-928c59c9d36b600da3c1.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p><strong>Benefits</strong></p>\\n<p>I love Codepen.io, it's a wonderful, easy-to-use tool for simple front-end experimentation. But as the fcc projects got more complex, I realized coding locally was going to save me a bunch of headaches. My text-editor and <a href=\\\"https://incident57.com/codekit/\\\">codekit</a> combo are just waaay faster.</p>\\n<ul>\\n<li>Autocomplete</li>\\n<li>Compile everything (codepen was really dragging trying to compile Jade)</li>\\n<li>Better auto-refresh</li>\\n<li>Built in bower</li>\\n<li>Git versioning</li>\\n<li>Improved screen real-estate experience</li>\\n</ul>\\n<h2>Git to Github</h2>\\n<p>Since I'm already saving locally, and using git for version control, I figured might as well upload to Github. Plus, Github has a fantastic, free service for front-end projects called <a href=\\\"https://pages.github.com/\\\">Github Pages</a>. Just update your repo and your changes are live.</p>\\n<p>How it works is simple. Github checks if your repository has a branch called <code>gh-pages</code> and serves any code that's sitting in that branch. No back-end stuff here, but HTML, CSS and JS work like a charm.</p>\\n<h2>First things first</h2>\\n<p>Let's make a new folder for your project. I'll use the <a href=\\\"http://www.freecodecamp.com/challenges/stylize-stories-on-camper-news\\\">Camper News</a> project as my example.</p>\\n<p>Got to your work directory and make a new one. You can do this in the terminal (or not).</p>\\n<div class=\\\"lightbox-wrapper\\\">[![Project Directory](//discourse-user-assets.s3.amazonaws.com/optimized/2X/2/2e3faaa2752657c592a9991ceed29a0200f332e6_1_690x387.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">Fullscreen_10_29_15__12_06_PM.png</span><span class=\\\"informations\\\">1366x768 174 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/2/2e3faaa2752657c592a9991ceed29a0200f332e6.png \\\"Fullscreen_10_29_15__12_06_PM.png\\\") </div>\\n<p>Now, go into the project directory, and (for sure in the terminal this time) use the command <code>git init</code>. Note, this tutorial assumes <a href=\\\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\\\">you have git installed</a>.</p>\\n<p>Alright, awesome. Now we're ready to work.</p>\\n<h2>Next steps</h2>\\n<p>Create some files in your campNews directory. I don't know, maybe an index.html and probably app.css and app.js, or whatever naming convention you prefer. Put your code in these files. Alright, now we're ready for our first commit. It takes <strong>two steps</strong>.</p>\\n<ol>\\n<li><code>git add -A</code> will prep all these new files and the new code inside them</li>\\n<li><code>git commit -m 'relevant message'</code> will commit all the work you've done to the branch you're currently on ('master' by default)</li>\\n</ol>\\n<h2>The key to this whole thing</h2>\\n<p>OK, so far we're still local. There's some stuff we gotta do to take our work and move it to github. It's at this point I like to switch branches. Remember - github only serves from gh-pages, and if you've followed along so far, your branch is called 'master'. Let's make a new (local) gh-pages branch.</p>\\n<p><code>git checkout -b gh-pages</code> will create it, copy all the work from master into gh-pages and switch me over to the branch. Phew.</p>\\n<p><code>git branch -d master</code> will get rid of the master branch. Sounds crazy I know, but what do we need it for? Just think of gh-pages as your NEW master branch.</p>\\n<p>Now, <code>git add -A</code> and <code>git commit -m 'relevant message'</code> again, just in case. And be prepared to leave your editor and terminal and go online for the first time.</p>\\n<p>Go to your github profile and create a new repo. Name it something relevant, like campNews.</p>\\n<div class=\\\"lightbox-wrapper\\\">[![New Repo](//discourse-user-assets.s3.amazonaws.com/optimized/2X/3/3f113af87b94fcd649c78d5f6d36463795671e7b_1_690x387.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">Fullscreen_10_29_15__12_49_PM.png</span><span class=\\\"informations\\\">1366x768 314 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/3/3f113af87b94fcd649c78d5f6d36463795671e7b.png \\\"Fullscreen_10_29_15__12_49_PM.png\\\") </div>\\n<p>Once it's created, go in and grab the HTTPS clone URL. (Ignore the files in my screenshot, your repo will be empty at this point).</p>\\n<div class=\\\"lightbox-wrapper\\\">[![clone url](//discourse-user-assets.s3.amazonaws.com/optimized/2X/a/a0f3da26ba0802342d7d6f7890763a2bca32b62a_1_690x387.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">Fullscreen_10_29_15__12_51_PM.png</span><span class=\\\"informations\\\">1366x768 218 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/a/a0f3da26ba0802342d7d6f7890763a2bca32b62a.png \\\"Fullscreen_10_29_15__12_51_PM.png\\\") </div>\\n<h2>Putting it all together</h2>\\n<p>And you can leave the online world. Back to the terminal! Let's connect our local project to this github repo. All it takes is one command.</p>\\n<p><code>git remote add origin &#x3C;server></code> Just replace server with the HTTPS url you just copied. So my command looks like this:</p>\\n<p><code>git remote add origin https://github.com/gkobilansky/campNews.git</code>.</p>\\n<p>OK, so far we've:</p>\\n<ol>\\n<li>Created our project</li>\\n<li>Versioned it in git</li>\\n<li>Commited some changes</li>\\n<li>Switched it to the 'gh-pages' branch</li>\\n<li>Connected it to github</li>\\n</ol>\\n<h2>Last step!</h2>\\n<p>Push you project to github. Again, simple:</p>\\n<p><code>git push origin gh-pages</code></p>\\n<p>That command will make sure your latest commits get uploaded to github. Once you've done this at least once, your project should be available <a><a href=\\\"http://_username_.github.io/_repository_\\\">http://<em>username</em>.github.io/<em>repository</em></a></a>, so for me it's <a href=\\\"http://gkobilansky.github.io/campNews\\\">http://gkobilansky.github.io/campNews</a>.</p>\\n<p>Once this is all done, the process just repeats itself:</p>\\n<ol>\\n<li><code>git add -A</code></li>\\n<li><code>git commit -m 'relevant message'</code></li>\\n<li><code>git push origin gh-pages</code></li>\\n</ol>\\n<p>Granted, steeper learning curve than codepen.io, but faster and more flexible once you get the hang of it.</p>\\n<p>Happy coding!</p>\\n<p>PS. Thanks to <a href=\\\"http://rogerdudler.github.io/git-guide/\\\">this guide</a> by Roger Dudler for keeping things simple.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Use Github Static Pages to Host Your Front End Projects\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/miscellaneous/use-github-static-pages-to-host-your-front-end-projects/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/miscellaneous/use-github-static-pages-to-host-your-front-end-projects/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-use-github-static-pages-to-host-your-front-end-projects.json\n// module chunks = 240"],"sourceRoot":""}