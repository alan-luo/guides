{"version":3,"sources":["webpack:///path---articles-python-python-commenting-code-2ce03107e25c4b89d282.js","webpack:///./.cache/json/articles-python-python-commenting-code.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-python-python-commenting-code.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,MAERC,gGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,q8DACAC,aACAC,MAAA,yBACAC,OAAA,mGAIAC,aACAC,KAAA","file":"path---articles-python-python-commenting-code-2ce03107e25c4b89d282.js","sourcesContent":["webpackJsonp([198],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-commenting-code.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>Comments are used to annotate, describe, or explain code that is complex or difficult to understand. Python will intentionally ignore comments when it compiles to bytecode by the interpreter. <a href=\\\"https://www.python.org/dev/peps/pep-0008/#comments\\\"><code>PEP 8</code></a> has a section dealing with comments.</p>\\n<p><strong>Block</strong> and <strong>inline</strong> comments start with a <code>#</code>, followed by a space before the comment:</p>\\n<pre><code># This is a block comment.\\nprint('Hello world!') # This is an inline commment.\\n</code></pre>\\n<p>Python does not include a formal way to write multiline comments. Each line of a comment spanning multiple lines should start with <code>#</code> and a space:</p>\\n<pre><code># This is the first line of a multiline comment.\\n# This is the second line.\\n</code></pre>\\n<p>Another type of comment is the <strong>docstring</strong>, documented in <a href=\\\"https://www.python.org/dev/peps/pep-0257/\\\"><code>PEP 257</code></a>. Docstrings are a specific type of comment that becomes the <code>__doc__</code> attribute.</p>\\n<p>For a string literal to be a docstring, it must start and end with <code>\\\\\\\"\\\\\\\"\\\\\\\"</code> and be the first statement of the module, function, class, or method definition it is documenting:</p>\\n<pre><code>class SomeClass():\\n    \\\"\\\"\\\"Summary line for SomeClass.\\n\\n    More elaborate descriptions may require using a\\n    a multiline docstring.\\n    \\\"\\\"\\\"\\n\\n    def method_a(self):\\n        \\\"\\\"\\\"Single line summary of method_a.\\\"\\\"\\\"\\n        pass\\n</code></pre>\\n<p>String literals that start and end with <code>\\\"\\\"\\\"</code> that are not docstrings (not the first statement), can be used for multiline strings. They will not become <code>__doc__</code> attributes. If they are not assigned to a variable, they will not generate bytecode. There is some discussion about using them as multiline comments found <a href=\\\"http://stackoverflow.com/questions/7696924/multiline-comments-in-python\\\">here</a>.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Python Commenting Code\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-commenting-code/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/python/python-commenting-code/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-python-python-commenting-code-2ce03107e25c4b89d282.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>Comments are used to annotate, describe, or explain code that is complex or difficult to understand. Python will intentionally ignore comments when it compiles to bytecode by the interpreter. <a href=\\\"https://www.python.org/dev/peps/pep-0008/#comments\\\"><code>PEP 8</code></a> has a section dealing with comments.</p>\\n<p><strong>Block</strong> and <strong>inline</strong> comments start with a <code>#</code>, followed by a space before the comment:</p>\\n<pre><code># This is a block comment.\\nprint('Hello world!') # This is an inline commment.\\n</code></pre>\\n<p>Python does not include a formal way to write multiline comments. Each line of a comment spanning multiple lines should start with <code>#</code> and a space:</p>\\n<pre><code># This is the first line of a multiline comment.\\n# This is the second line.\\n</code></pre>\\n<p>Another type of comment is the <strong>docstring</strong>, documented in <a href=\\\"https://www.python.org/dev/peps/pep-0257/\\\"><code>PEP 257</code></a>. Docstrings are a specific type of comment that becomes the <code>__doc__</code> attribute.</p>\\n<p>For a string literal to be a docstring, it must start and end with <code>\\\\\\\"\\\\\\\"\\\\\\\"</code> and be the first statement of the module, function, class, or method definition it is documenting:</p>\\n<pre><code>class SomeClass():\\n    \\\"\\\"\\\"Summary line for SomeClass.\\n\\n    More elaborate descriptions may require using a\\n    a multiline docstring.\\n    \\\"\\\"\\\"\\n\\n    def method_a(self):\\n        \\\"\\\"\\\"Single line summary of method_a.\\\"\\\"\\\"\\n        pass\\n</code></pre>\\n<p>String literals that start and end with <code>\\\"\\\"\\\"</code> that are not docstrings (not the first statement), can be used for multiline strings. They will not become <code>__doc__</code> attributes. If they are not assigned to a variable, they will not generate bytecode. There is some discussion about using them as multiline comments found <a href=\\\"http://stackoverflow.com/questions/7696924/multiline-comments-in-python\\\">here</a>.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Python Commenting Code\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/python/python-commenting-code/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/python/python-commenting-code/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-python-python-commenting-code.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-python-python-commenting-code.json\n// module chunks = 198"],"sourceRoot":""}