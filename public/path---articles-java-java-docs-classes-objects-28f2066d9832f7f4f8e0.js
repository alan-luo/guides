webpackJsonp([1341],{"./node_modules/json-loader/index.js!./.cache/json/articles-java-java-docs-classes-objects.json":function(e,a){e.exports={data:{markdownRemark:{html:'<h1>Java Classes &#x26; Objects</h1>\n<p>Classes are groups of variables and operations on them. A class can have variables, methods (or functions) and constructors (or methods which are used to initiate, more on that later!).</p>\n<p>Think of a <code>Class</code> as a blueprint for creating something concrete. A <code>Class</code> tells you the \'what\' and \'how\' an <code>object</code> of that Class will look like once <code>instantiated</code>. In essence, it defines <code>properties</code> (say color, engine capacity) and <code>behavior</code> (stop, speed up, change gears, honk etc.) for a Car in this case.</p>\n<p>Objects are <em>instances</em> of a class. All objects are instances of a certain class. Imagine a class being a "template", which every Object copies to. When you create an Object, basically it creates a new object on the blueprint of a class. Now lets look at this from a little piece of code :</p>\n<pre><code>// Car class\npublic class Car {\n  // car name\n  private String name;\n    // car mannufacturer name\n    private String manufacturerName;\n  // constructor\n    public Car(String name, String man) {\n        this.name = name;\n        this.manufacturerName = man;\n    }\n  // getter method\n    public String getName() {\n        return name;\n    }\n  // getter method\n    public String getManufacturerName() {\n        return manufacturerName;\n    }\n\n  //setter method\n  public void setName(String name){\n     this.name = name;\n  }\n}\n\nCar modelS = new Car("Model S","Tesla");\n\nSystem.out.println("Full Car Name = " + modelS.getManufacturerName() + " " + modelS.getName());\n// prints Tesla Model S\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CJZP/0">Run Code</a></p>\n<p>So, <code>Car</code> is a class, which has the fields or properties name and manufacturerName. <code>modelS</code> is an object of <code>Car</code> class. So <code>modelS</code> also has the same properties and methods.</p>',frontmatter:{title:"Java Docs Classes  Objects",parent:"/home/stuart/guides/src/pages/articles/java/java-docs-classes--objects/index.md absPath of file"}}},pathContext:{slug:"/articles/java/java-docs-classes--objects/"}}}});
//# sourceMappingURL=path---articles-java-java-docs-classes-objects-28f2066d9832f7f4f8e0.js.map