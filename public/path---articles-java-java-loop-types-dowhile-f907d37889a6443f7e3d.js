webpackJsonp([1548],{"./node_modules/json-loader/index.js!./.cache/json/articles-java-java-loop-types-dowhile.json":function(e,o){e.exports={data:{markdownRemark:{html:'<h1>The Java Do While loop</h1>\n<p>The <code>do while</code> is very similar to the <code>while</code> loop in the way it works, but is <em>exit controlled</em> (unlike the <code>for</code> and <code>while</code> loops which are <em>entry controlled</em>), that is, the truth value of its <code>expression</code> is evaluated after the execution of <code>Statements</code>.</p>\n<pre><code>do\n{\n    // Statements\n}\nwhile (expression);\n</code></pre>\n<p>This kind of loop is particularly useful if you want your <code>Statements</code> to be executed at least once, irrespective of what <code>expression</code> evaluates to. You want to do this if you are initializing a variable inside your loop and plan on using its value later.</p>\n<pre><code>int iter_DoWhile = 20;\ndo\n{\n    System.out.print (iter_DoWhile + " ");\n\n    // Increment the counter\n    iter_DoWhile++;\n}\nwhile(iter_DoWhile &#x3C; 10);\nSystem.out.println ("iter_DoWhile Value: " + iter_DoWhile);\n</code></pre>\n<p>Output:</p>\n<pre><code>20\niter_DoWhile Value: 21\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CJYl/0">Run Code</a></p>',frontmatter:{title:"Java Loop Types Dowhile",parent:"/home/stuart/guides/src/pages/articles/java/java-loop-types-dowhile/index.md absPath of file"}}},pathContext:{slug:"/articles/java/java-loop-types-dowhile/"}}}});
//# sourceMappingURL=path---articles-java-java-loop-types-dowhile-f907d37889a6443f7e3d.js.map