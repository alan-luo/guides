webpackJsonp([325],{"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-how-to-squash-multiple-commits-into-one-with-git.json":function(e,t){e.exports={data:{markdownRemark:{html:"<p>This is an awesome feature of <code>rebase</code> that can be used in the <code>interactive</code> mode. To squash the last <em>n</em> commits into one, run the following command:</p>\n<pre><code>git rebase -i HEAD~n\n</code></pre>\n<p>That will open up a text-editor with something similar to the following:</p>\n<pre><code>pick commit_1\npick commit_2\npick commit_3\n...\npick commit_n\n# Bunch of comments\n</code></pre>\n<p>Leave the first commit alone, and change the rest of the <code>pick</code>s to <code>squash</code>. Save and exit the editor.</p>\n<p>So if you wanted to squash the last three commits, you'll first run <code>git rebase -i HEAD~3</code> and then you'll want to edit your commits to look something like this:</p>\n<pre><code>pick dd661ba Commit 1\nsquash 71f5fee Commit 2\nsquash f4b4bf1 Commit 3\n</code></pre>\n<p>If you've already pushed to a remote before squashing your commits, you'll have to push to the remote again, with the <code>-f</code> flag, otherwise git will throw an error at you.</p>\n<p>It is strongly suggested that you read the information in the opened file as there are many things you can do.</p>",frontmatter:{title:"How To Squash Multiple Commits Into One with Git",parent:"/home/stuart/guides/src/pages/articles/miscellaneous/how-to-squash-multiple-commits-into-one-with-git/index.md absPath of file"}}},pathContext:{slug:"/articles/miscellaneous/how-to-squash-multiple-commits-into-one-with-git/"}}}});
//# sourceMappingURL=path---articles-miscellaneous-how-to-squash-multiple-commits-into-one-with-git-3c944f1ee68953334a13.js.map