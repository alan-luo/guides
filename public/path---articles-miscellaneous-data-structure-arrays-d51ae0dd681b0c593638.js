webpackJsonp([411],{"./node_modules/json-loader/index.js!./.cache/json/articles-miscellaneous-data-structure-arrays.json":function(e,a){e.exports={data:{markdownRemark:{html:'<p>Internally, <code>array</code> is a kind of data structure that can store a fixed-size sequential collection of elements of the same type. An <code>array</code> is used to store a collection of data, but it is often more useful to think of an <code>array</code> as a collection of variables of the same type.</p>\n<p><code>array</code> consists of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.</p>\n<h2>Arrays in C++</h2>\n<p>C++ provides a data structure, <code>array</code>, which stores a fixed-size sequential collection of elements of the same data-type. An <code>array</code> is used to store a collection of data, but it is better to think of an <code>array</code> as a collection of variables of the same type.</p>\n<h4>Declaration of <code>array</code></h4>\n<pre><code>int intarray[10]; // Declares an array of integer type of size 10 with elements having random values. Index ranges from 0 to 9(i.e. size-1).\nint intarray[10] = { 0 }; // Declares an array of integer of size 10 with all elements having value 0\n\n// Choose one the two declarations and then move ahead.\n</code></pre>\n<h4>Inserting elements to <code>array</code>:</h4>\n<pre><code>intarray[0] = 1; // Inserts an integer value of 1 at index 0\nintarray[1] = 0; // Inserts an integer value of 0 at index 1\nintarray[2] = -1; // Inserts an integer value of -1 at index 2\nintarray[3] = 1; // Inserts an integer value of 1 at index 3\n</code></pre>\n<h4>Printing an <code>array</code>:</h4>\n<pre><code>std::cout &#x3C;&#x3C; intarray[0] &#x3C;&#x3C; std::endl; // Returns 1 which is element at index of the array\nstd::cout &#x3C;&#x3C; intarray[11] &#x3C;&#x3C; std::endl; // Would give a a "Garbage" value as there is no element at index 11 of array.\n// That memory location is beyond the range of the array.\n\n// To print all the elements of the array\nfor(int i = 0; i &#x3C; n; i++)\n    std::cout &#x3C;&#x3C; intarray[i] &#x3C;&#x3C; std::endl;\n</code></pre>\n<h4>Basic operations on <code>array</code>:</h4>\n<pre><code>std::cout &#x3C;&#x3C; sizeof(intarray)/sizeof(intarray[0]) &#x3C;&#x3C; std::endl; // Returns the length of the array i.e. 10.\nstd::cout &#x3C;&#x3C; sizeof(intarray[0]) &#x3C;&#x3C; std::endl; // Returns length in bytes of one array item i.e. 4 as it is an integer\n</code></pre>\n<p>:rocket: <a href="https://repl.it/CWZE/3">Run Code</a> ## Arrays in Python Python doesn\'t have a native <code>array</code> data structure. An <code>array</code> in Python should not be confused with <code>list</code>. The major difference between a <code>list</code> and an <code>array</code> in Python is that a <code>list</code> can have different types of values whereas an <code>array</code> should have all the values of same type. #### Declaration of <code>array</code>  </p>\n<pre><code>from array import array\nintarray = array(\'i\') # Declares an array of integer type\n</code></pre>\n<h4>Inserting elements to <code>array</code>:</h4>\n<pre><code>intarray.append(1) # Inserts an integer value of 1 to the array\nintarray.append(0) # Inserts an integer value of 0 to the array\nintarray.append(-1) # Inserts an integer value of -1 to the array\nintarray.append(1) # Inserts an integer value of 1 to the array\n\nintarray.append(\'d\') # Would give a TypeError as the array is of integer type.\n\n#Resolve the above error and then move ahead.\n</code></pre>\n<h4>Printing an <code>array</code>:</h4>\n<pre><code>print(intarray) # Returns array(\'i\', [1, 4, -1])\nprint(intarray[0]) # Returns 1 which is the element at index 0 of the array\nprint(intarray[3]) # Would give IndexError as there is no element at index 3 of array.\n\n#Resolve the above error and then move ahead.\n\n# To print all the elements of the array\nfor i in intarray:\n    print(i)\n</code></pre>\n<h4>Basic operations on <code>array</code>:</h4>\n<pre><code>len(intarray) # Returns the length of the array i.e. 3\nintarray.itemsize # Returns length in bytes of one array item i.e. 4 as it is an integer\nintarray.count(1) # Returns the number of occurrences of 1 in the array i.e. 2\nintarray.insert(1, 3) # Insert a new item with value x in the array before position i\nintarray.remove(1) # Remove the first occurrence of 1 from the array\nintarray.reverse() # Reverse the order of the items in the array\nintarray.pop(1) # Removes the item with the index 1 from the array and returns it\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://repl.it/CWJB">Run Code</a></p>\n<p><a href="https://docs.python.org/3.5/library/array.html">Official Docs</a></p>',frontmatter:{title:"Data Structure Arrays",parent:"/home/stuart/guides/src/pages/articles/miscellaneous/data-structure-arrays/index.md absPath of file"}}},pathContext:{slug:"/articles/miscellaneous/data-structure-arrays/"}}}});
//# sourceMappingURL=path---articles-miscellaneous-data-structure-arrays-d51ae0dd681b0c593638.js.map