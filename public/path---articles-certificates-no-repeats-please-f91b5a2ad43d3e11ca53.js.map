{"version":3,"sources":["webpack:///path---articles-certificates-no-repeats-please-f91b5a2ad43d3e11ca53.js","webpack:///./.cache/json/articles-certificates-no-repeats-please.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-certificates-no-repeats-please.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,iGACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,kkWACAC,aACAC,MAAA,oBACAC,OAAA,oGAIAC,aACAC,KAAA","file":"path---articles-certificates-no-repeats-please-f91b5a2ad43d3e11ca53.js","sourcesContent":["webpackJsonp([1927],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-no-repeats-please.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3\\\" alt=\\\":triangular_flag_on_post:\\\" title=\\\":triangular_flag_on_post:\\\"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3\\\" alt=\\\":busts_in_silhouette:\\\" title=\\\":busts_in_silhouette:\\\"> and write your own code <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3\\\" alt=\\\":pencil:\\\" title=\\\":pencil:\\\"></p>\\n<h3><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/checkered_flag.png?v=3\\\" alt=\\\":checkered_flag:\\\" title=\\\":checkered_flag:\\\"> Problem Explanation:</h3>\\n<p>This task requires us to return the number of total permutations of the provided string that don't have repeated consecutive letters. It is to be assumed that all characters in the provided string are each unique. For example, <code>aab</code> should return 2 because it has 6 total permutations (<code>aab</code>, <code>aab</code>, <code>aba</code>, <code>aba</code>, <code>baa</code>, <code>baa</code>), but only 2 of them (<code>aba</code> and <code>aba</code>) don't have the same letter (in this case <code>a</code>) repeating.</p>\\n<p>To achieve that, we'll have to look at each possible permutation of a string. There are several ways to do that. A common interview question is building a function that collects all permutations of a string. There are several tutorials available on the internet on how to do that.</p>\\n<h4>Potential Methods Used As Solution</h4>\\n<h5>Recursive Method</h5>\\n<p>This task can be daunting even after watching a tutorial. To write a recursive solution, you will want to send each new use of the function three inputs:</p>\\n<ol>\\n<li>A new string (or character array) that is being built.</li>\\n<li>A position in your new string that's going to be filled next.</li>\\n<li>An idea of what characters (more specifically positions) from the original string have yet to be used.</li>\\n</ol>\\n<p>The pseudo code will look something like this:</p>\\n<pre><code>var str = ???;\\npermAlone(current position in original string, characters used already in original string, created string) {\\n  if (current string is finished) {\\n    print current string;\\n  } else {\\n    for (var i = 0; i &#x3C; str.length; i++) {\\n      if (str[i] has not been used) {\\n        put str[i] into the current position of new string;\\n        mark str[i] as used;\\n        permAlone(current position in original string, characters used already in original string, created string);\\n        remove str[i] as used because another branch in the tree for i + 1 will likely use it;\\n      }\\n    }\\n  }\\n}\\npermAlone(0, nothing used yet, empty new string (or array the same size as str));\\n</code></pre>\\n<p>Another way to think about this problem is to start from an empty space. Introduce the first letter to the space. This space will now contain the first sub-permutation. Here's a diagram illustrating the idea:</p>\\n<div class=\\\"lightbox-wrapper\\\">[![diagram](//discourse-user-assets.s3.amazonaws.com/optimized/2X/6/69896bacc8bd3b2e347beb4b304a7f97caa6d9ab_1_690x417.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">zFm5gRx.png</span><span class=\\\"informations\\\">898x544 7.1 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/6/69896bacc8bd3b2e347beb4b304a7f97caa6d9ab.png \\\"zFm5gRx.png\\\") </div>\\n<h5>Non-Recursive Method</h5>\\n<pre><code>// An approach to introduce a new character to a permutation\\nvar ch = '?';\\nvar source = ['?', '?', '?'];     // Current sub-permutation\\nvar temp, dest = [];\\n\\nfor (var i = 0; i &#x3C;= source.length; ++i) {\\n  temp = source.slice(0);         // Copy the array\\n  temp.splice(i, 0, ch);          // Insert the new character\\n  dest.push(temp);                // Store the new sub-permutation\\n}\\n</code></pre>\\n<p>Finding each permutation could then be done non-recursively by including the above in a function taking a source array and returning a destination array. For each letter of the input string, pass that character, as well as the array returned from the previous call of the function.</p>\\n<p>A way to visualize this is by considering a tree that starts with the first character of your string:</p>\\n<div class=\\\"lightbox-wrapper\\\">[![Permutation Tree](//discourse-user-assets.s3.amazonaws.com/optimized/2X/8/8187f2b06cdc02cf62286c18ce15bfcdc99bc68c_1_690x386.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">t8zNarc.png</span><span class=\\\"informations\\\">951x533 12.7 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/8/8187f2b06cdc02cf62286c18ce15bfcdc99bc68c.png \\\"t8zNarc.png\\\") </div>\\n<h4>Relevant Links</h4>\\n<ul>\\n<li><a href=\\\"https://www.mathsisfun.com/combinatorics/combinations-permutations.html\\\">Permutations</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Heap&#x27;s_algorithm\\\">Heap's algorithm</a></li>\\n<li><a>JS Regex Resources</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\\\">JS String object</a></li>\\n</ul>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3\\\" alt=\\\":speech_balloon:\\\" title=\\\":speech_balloon:\\\"> Hint: 1</h2>\\n<ul>\\n<li>The easiest way is to use Heap's algorithm to recursively get a list of all the permutations.</li>\\n</ul>\\n<blockquote>\\n<p><em>try to solve the problem now</em></p>\\n</blockquote>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3\\\" alt=\\\":speech_balloon:\\\" title=\\\":speech_balloon:\\\"> Hint: 2</h2>\\n<ul>\\n<li>Once you have the list then just create a regular expression to catch the repeating characters.</li>\\n</ul>\\n<blockquote>\\n<p><em>try to solve the problem now</em></p>\\n</blockquote>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3\\\" alt=\\\":speech_balloon:\\\" title=\\\":speech_balloon:\\\"> Hint: 3</h2>\\n<ul>\\n<li>You will want to have the permutations as an array of joined strings instead of separated characters.</li>\\n</ul>\\n<blockquote>\\n<p><em>try to solve the problem now</em></p>\\n</blockquote>\\n<h2>Spoiler Alert!</h2>\\n<p><img src=\\\"//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif\\\" alt=\\\"687474703a2f2f7777772e796f75726472756d2e636f6d2f796f75726472756d2f696d616765732f323030372f31302f31302f7265645f7761726e696e675f7369676e5f322e676966.gif\\\"></p>\\n<p><strong>Solution ahead!</strong></p>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3\\\" alt=\\\":beginner:\\\" title=\\\":beginner:\\\"> Basic Code Solution:</h2>\\n<pre><code>function permAlone(str) {\\n\\n  // Create a regex to match repeated consecutive characters.\\n  var regex = /(.)\\\\1+/g;\\n\\n  // Split the string into an array of characters.\\n  var arr = str.split('');\\n  var permutations = [];\\n  var tmp;\\n\\n  // Return 0 if str contains same character.\\n  if (str.match(regex) !== null &#x26;&#x26; str.match(regex)[0] === str) return 0;\\n\\n  // Function to swap variables' content.\\n  function swap(index1, index2) {\\n    tmp = arr[index1];\\n    arr[index1] = arr[index2];\\n    arr[index2] = tmp;\\n  }\\n\\n  // Generate arrays of permutations using the algorithm.\\n  function generate(int) {\\n    if (int === 1) {\\n      // Make sure to join the characters as we create  the permutation arrays\\n      permutations.push(arr.join(''));\\n    } else {\\n      for (var i = 0; i != int; ++i) {\\n        generate(int - 1);\\n        swap(int % 2 ? 0 : i, int - 1);\\n      }\\n    }\\n  }\\n\\n  generate(arr.length);\\n\\n  // Filter the array of repeated permutations.\\n  var filtered = permutations.filter(function(string) {\\n    return !string.match(regex);\\n  });\\n\\n  // Return how many have no repetitions.\\n  return filtered.length;\\n}\\n\\n// Test here.\\npermAlone('aab');\\n</code></pre>\\n<p><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CLop/0\\\">Run Code</a></p>\\n<h3>Code Explanation:</h3>\\n<ul>\\n<li><strong>regex</strong> contains the regular expression to match repeated consecutive characters.</li>\\n<li>The string <strong>str</strong> is split into an array of characters, <strong>arr</strong>.</li>\\n<li>0 is returned if <strong>str</strong> contains same characters.</li>\\n<li>The function <code>swap()</code> is used for the purpose of swapping the contents of two variable's contents.</li>\\n<li>The next block of code uses Heap's algorithm to generate arrays of permutations in <strong>permutations</strong>.</li>\\n<li>The <strong>filtered</strong> variable filters <strong>permutations</strong> to include only non-repeated permutations.</li>\\n<li><code>filtered.length</code> returns the number of total permutations of the provided string that don't have repeated consecutive letters.</li>\\n</ul>\\n<h4>Relevant Links</h4>\\n<ul>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-string-prototype-split/15944\\\">JS String Prototype Split</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-string-prototype-match/15941\\\">JS String Prototype Match</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-array-prototype-push/14298\\\">JS Array Prototype Push</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-array-prototype-join/14292\\\">JS Array Prototype Join</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-for-loop/14666s-Explained\\\">JS For Loops Explained</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\\\">array.length</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-array-prototype-filter/14289\\\">JS Array Prototype Filter</a></li>\\n</ul>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3\\\" alt=\\\":clipboard:\\\" title=\\\":clipboard:\\\"> NOTES FOR CONTRIBUTIONS:</h2>\\n<ul>\\n<li><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3\\\" alt=\\\":warning:\\\" title=\\\":warning:\\\"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\\n<li>Add an explanation of your solution.</li>\\n<li>Categorize the solution in one of the following categories — <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3\\\" alt=\\\":traffic_light:\\\" title=\\\":traffic_light:\\\"></li>\\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3\\\" alt=\\\":warning:\\\" title=\\\":warning:\\\"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\\n</ul>\\n<blockquote>\\n<p>See <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3\\\" alt=\\\":point_right:\\\" title=\\\":point_right:\\\"> <a href=\\\"http://forum.freecodecamp.com/t/algorithm-article-template/14272\\\"><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\\n</blockquote>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"No Repeats Please\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/no-repeats-please/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/certificates/no-repeats-please/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-certificates-no-repeats-please-f91b5a2ad43d3e11ca53.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/triangular_flag_on_post.png?v=3\\\" alt=\\\":triangular_flag_on_post:\\\" title=\\\":triangular_flag_on_post:\\\"> Remember to use <a><strong><code>Read-Search-Ask</code></strong></a> if you get stuck. Try to pair program <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/busts_in_silhouette.png?v=3\\\" alt=\\\":busts_in_silhouette:\\\" title=\\\":busts_in_silhouette:\\\"> and write your own code <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/pencil.png?v=3\\\" alt=\\\":pencil:\\\" title=\\\":pencil:\\\"></p>\\n<h3><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/checkered_flag.png?v=3\\\" alt=\\\":checkered_flag:\\\" title=\\\":checkered_flag:\\\"> Problem Explanation:</h3>\\n<p>This task requires us to return the number of total permutations of the provided string that don't have repeated consecutive letters. It is to be assumed that all characters in the provided string are each unique. For example, <code>aab</code> should return 2 because it has 6 total permutations (<code>aab</code>, <code>aab</code>, <code>aba</code>, <code>aba</code>, <code>baa</code>, <code>baa</code>), but only 2 of them (<code>aba</code> and <code>aba</code>) don't have the same letter (in this case <code>a</code>) repeating.</p>\\n<p>To achieve that, we'll have to look at each possible permutation of a string. There are several ways to do that. A common interview question is building a function that collects all permutations of a string. There are several tutorials available on the internet on how to do that.</p>\\n<h4>Potential Methods Used As Solution</h4>\\n<h5>Recursive Method</h5>\\n<p>This task can be daunting even after watching a tutorial. To write a recursive solution, you will want to send each new use of the function three inputs:</p>\\n<ol>\\n<li>A new string (or character array) that is being built.</li>\\n<li>A position in your new string that's going to be filled next.</li>\\n<li>An idea of what characters (more specifically positions) from the original string have yet to be used.</li>\\n</ol>\\n<p>The pseudo code will look something like this:</p>\\n<pre><code>var str = ???;\\npermAlone(current position in original string, characters used already in original string, created string) {\\n  if (current string is finished) {\\n    print current string;\\n  } else {\\n    for (var i = 0; i &#x3C; str.length; i++) {\\n      if (str[i] has not been used) {\\n        put str[i] into the current position of new string;\\n        mark str[i] as used;\\n        permAlone(current position in original string, characters used already in original string, created string);\\n        remove str[i] as used because another branch in the tree for i + 1 will likely use it;\\n      }\\n    }\\n  }\\n}\\npermAlone(0, nothing used yet, empty new string (or array the same size as str));\\n</code></pre>\\n<p>Another way to think about this problem is to start from an empty space. Introduce the first letter to the space. This space will now contain the first sub-permutation. Here's a diagram illustrating the idea:</p>\\n<div class=\\\"lightbox-wrapper\\\">[![diagram](//discourse-user-assets.s3.amazonaws.com/optimized/2X/6/69896bacc8bd3b2e347beb4b304a7f97caa6d9ab_1_690x417.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">zFm5gRx.png</span><span class=\\\"informations\\\">898x544 7.1 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/6/69896bacc8bd3b2e347beb4b304a7f97caa6d9ab.png \\\"zFm5gRx.png\\\") </div>\\n<h5>Non-Recursive Method</h5>\\n<pre><code>// An approach to introduce a new character to a permutation\\nvar ch = '?';\\nvar source = ['?', '?', '?'];     // Current sub-permutation\\nvar temp, dest = [];\\n\\nfor (var i = 0; i &#x3C;= source.length; ++i) {\\n  temp = source.slice(0);         // Copy the array\\n  temp.splice(i, 0, ch);          // Insert the new character\\n  dest.push(temp);                // Store the new sub-permutation\\n}\\n</code></pre>\\n<p>Finding each permutation could then be done non-recursively by including the above in a function taking a source array and returning a destination array. For each letter of the input string, pass that character, as well as the array returned from the previous call of the function.</p>\\n<p>A way to visualize this is by considering a tree that starts with the first character of your string:</p>\\n<div class=\\\"lightbox-wrapper\\\">[![Permutation Tree](//discourse-user-assets.s3.amazonaws.com/optimized/2X/8/8187f2b06cdc02cf62286c18ce15bfcdc99bc68c_1_690x386.png)\\n<div class=\\\"meta\\\"><span class=\\\"filename\\\">t8zNarc.png</span><span class=\\\"informations\\\">951x533 12.7 KB</span><span class=\\\"expand\\\"></span></div>](//discourse-user-assets.s3.amazonaws.com/original/2X/8/8187f2b06cdc02cf62286c18ce15bfcdc99bc68c.png \\\"t8zNarc.png\\\") </div>\\n<h4>Relevant Links</h4>\\n<ul>\\n<li><a href=\\\"https://www.mathsisfun.com/combinatorics/combinations-permutations.html\\\">Permutations</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Heap&#x27;s_algorithm\\\">Heap's algorithm</a></li>\\n<li><a>JS Regex Resources</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\\\">JS String object</a></li>\\n</ul>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3\\\" alt=\\\":speech_balloon:\\\" title=\\\":speech_balloon:\\\"> Hint: 1</h2>\\n<ul>\\n<li>The easiest way is to use Heap's algorithm to recursively get a list of all the permutations.</li>\\n</ul>\\n<blockquote>\\n<p><em>try to solve the problem now</em></p>\\n</blockquote>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3\\\" alt=\\\":speech_balloon:\\\" title=\\\":speech_balloon:\\\"> Hint: 2</h2>\\n<ul>\\n<li>Once you have the list then just create a regular expression to catch the repeating characters.</li>\\n</ul>\\n<blockquote>\\n<p><em>try to solve the problem now</em></p>\\n</blockquote>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/speech_balloon.png?v=3\\\" alt=\\\":speech_balloon:\\\" title=\\\":speech_balloon:\\\"> Hint: 3</h2>\\n<ul>\\n<li>You will want to have the permutations as an array of joined strings instead of separated characters.</li>\\n</ul>\\n<blockquote>\\n<p><em>try to solve the problem now</em></p>\\n</blockquote>\\n<h2>Spoiler Alert!</h2>\\n<p><img src=\\\"//discourse-user-assets.s3.amazonaws.com/original/2X/2/2d6c412a50797771301e7ceabd554cef4edcd74d.gif\\\" alt=\\\"687474703a2f2f7777772e796f75726472756d2e636f6d2f796f75726472756d2f696d616765732f323030372f31302f31302f7265645f7761726e696e675f7369676e5f322e676966.gif\\\"></p>\\n<p><strong>Solution ahead!</strong></p>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/beginner.png?v=3\\\" alt=\\\":beginner:\\\" title=\\\":beginner:\\\"> Basic Code Solution:</h2>\\n<pre><code>function permAlone(str) {\\n\\n  // Create a regex to match repeated consecutive characters.\\n  var regex = /(.)\\\\1+/g;\\n\\n  // Split the string into an array of characters.\\n  var arr = str.split('');\\n  var permutations = [];\\n  var tmp;\\n\\n  // Return 0 if str contains same character.\\n  if (str.match(regex) !== null &#x26;&#x26; str.match(regex)[0] === str) return 0;\\n\\n  // Function to swap variables' content.\\n  function swap(index1, index2) {\\n    tmp = arr[index1];\\n    arr[index1] = arr[index2];\\n    arr[index2] = tmp;\\n  }\\n\\n  // Generate arrays of permutations using the algorithm.\\n  function generate(int) {\\n    if (int === 1) {\\n      // Make sure to join the characters as we create  the permutation arrays\\n      permutations.push(arr.join(''));\\n    } else {\\n      for (var i = 0; i != int; ++i) {\\n        generate(int - 1);\\n        swap(int % 2 ? 0 : i, int - 1);\\n      }\\n    }\\n  }\\n\\n  generate(arr.length);\\n\\n  // Filter the array of repeated permutations.\\n  var filtered = permutations.filter(function(string) {\\n    return !string.match(regex);\\n  });\\n\\n  // Return how many have no repetitions.\\n  return filtered.length;\\n}\\n\\n// Test here.\\npermAlone('aab');\\n</code></pre>\\n<p><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=3\\\" alt=\\\":rocket:\\\" title=\\\":rocket:\\\"> <a href=\\\"https://repl.it/CLop/0\\\">Run Code</a></p>\\n<h3>Code Explanation:</h3>\\n<ul>\\n<li><strong>regex</strong> contains the regular expression to match repeated consecutive characters.</li>\\n<li>The string <strong>str</strong> is split into an array of characters, <strong>arr</strong>.</li>\\n<li>0 is returned if <strong>str</strong> contains same characters.</li>\\n<li>The function <code>swap()</code> is used for the purpose of swapping the contents of two variable's contents.</li>\\n<li>The next block of code uses Heap's algorithm to generate arrays of permutations in <strong>permutations</strong>.</li>\\n<li>The <strong>filtered</strong> variable filters <strong>permutations</strong> to include only non-repeated permutations.</li>\\n<li><code>filtered.length</code> returns the number of total permutations of the provided string that don't have repeated consecutive letters.</li>\\n</ul>\\n<h4>Relevant Links</h4>\\n<ul>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-string-prototype-split/15944\\\">JS String Prototype Split</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-string-prototype-match/15941\\\">JS String Prototype Match</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-array-prototype-push/14298\\\">JS Array Prototype Push</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-array-prototype-join/14292\\\">JS Array Prototype Join</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-for-loop/14666s-Explained\\\">JS For Loops Explained</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\\\">array.length</a></li>\\n<li><a href=\\\"http://forum.freecodecamp.com/t/javascript-array-prototype-filter/14289\\\">JS Array Prototype Filter</a></li>\\n</ul>\\n<h2><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/clipboard.png?v=3\\\" alt=\\\":clipboard:\\\" title=\\\":clipboard:\\\"> NOTES FOR CONTRIBUTIONS:</h2>\\n<ul>\\n<li><img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3\\\" alt=\\\":warning:\\\" title=\\\":warning:\\\"> <strong>DO NOT</strong> add solutions that are similar to any existing solutions. If you think it is <strong><em>similar but better</em></strong>, then try to merge (or replace) the existing similar solution.</li>\\n<li>Add an explanation of your solution.</li>\\n<li>Categorize the solution in one of the following categories — <strong>Basic</strong>, <strong>Intermediate</strong> and <strong>Advanced</strong>. <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/traffic_light.png?v=3\\\" alt=\\\":traffic_light:\\\" title=\\\":traffic_light:\\\"></li>\\n<li>Please add your username only if you have added any <strong>relevant main contents</strong>. (<img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/warning.png?v=3\\\" alt=\\\":warning:\\\" title=\\\":warning:\\\"> <strong><em>DO NOT</em></strong> <em>remove any existing usernames</em>)</li>\\n</ul>\\n<blockquote>\\n<p>See <img src=\\\"https://forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=3\\\" alt=\\\":point_right:\\\" title=\\\":point_right:\\\"> <a href=\\\"http://forum.freecodecamp.com/t/algorithm-article-template/14272\\\"><strong><code>Wiki Challenge Solution Template</code></strong></a> for reference.</p>\\n</blockquote>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"No Repeats Please\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/no-repeats-please/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/certificates/no-repeats-please/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-certificates-no-repeats-please.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-certificates-no-repeats-please.json\n// module chunks = 1927"],"sourceRoot":""}