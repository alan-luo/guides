webpackJsonp([2028],{"./node_modules/json-loader/index.js!./.cache/json/articles-clojure-clojure-more-on-functions.json":function(e,o){e.exports={data:{markdownRemark:{html:'<p>Functions! They\'re pretty important. It\'s very difficult to do anything without a function. They\'re integral to any language, but especially Clojure, since it\'s a functional programming language that rejects object-oriented design. Let\'s learn some more about them!</p>\n<h2>Arity</h2>\n<p><strong>Arity</strong> refers to the number of arguments that your function expects.</p>\n<pre><code>;; add expects 2 arguments. Its arity is 2.\n(defn add [x y] (+ x y))\n(add 2 2)\n; => 4\n\n;; + itself is a function, and it can have any number of arguments.\n(+ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) ;; and so on...\n; => 136\n</code></pre>\n<p>Clojure has some special syntax that allows you to let your function do different stuff depending on the number of arguments it receives. This is called variable arity.</p>\n<pre><code>(defn foo\n  ([]                               ; if this function gets no arguments...\n    (println "Lisa needs braces!")) ; do this.\n  ([arg1]                           ; if this function gets 1 argument...\n    (println "Dental plan!")))      ; do this instead!\n(foo)\n; => Lisa needs braces!\n;    nil\n(foo "this is a placeholder argument.")\n; => Dental plan!\n;    nil\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://ideone.com/sXGplb">IDEOne it!</a></p>\n<h2>Anonymous functions</h2>\n<p>Let\'s look at a really simple function: a function that adds 1 to a number.</p>\n<pre><code>;; I\'ve called this function "my-inc" so you don\'t confuse it with inc.\n;; inc is a built-in function that already does this for us.\n(defn my-inc [n] (+ 1 n))\n(inc\' 5)\n; => 6\n</code></pre>\n<p>This looks pretty simple. It takes a single parameter - <code>n</code> - and returns <code>n + 1</code>. Let\'s pick it apart.</p>\n<pre><code>(def my-inc-2 (fn [n] (+ 1 n)))\n(inc\' 5)\n; => 6\n</code></pre>\n<p>You can see from this that using <code>defn</code> is just shorthand for using <code>(def ... (fn ...))</code>. But this reveals something interesting. What we\'re actually doing isn\'t \'defining a function\', it\'s just binding an anonymous function to a special name - <code>inc\'</code>. What if we don\'t give it a name?</p>\n<pre><code>((fn [n] (+ 1 n)) 5)\n; => 6\n</code></pre>\n<p>Bam! Boom! Kapow! Anonymous functions. This might seem useless now, but it comes in pretty handy later on for applying functions to lists using <code>map</code>, <code>reduce</code> and <code>filter</code>. Giving every function you write a name gets boring and cumbersome, fast.</p>\n<p>There\'s a shorter way to write anonymous functions, intended for very short, simple functions. It does not allow for destructuring or variable arity. However, it is quite concise.</p>\n<pre><code>(#(+ 1 %) 5)\n; => 6\n</code></pre>\n<p><code>#(...)</code> is a shorthand way to define an anonymous function. <code>%</code> refers to the first argument to the function. If your function expects several arguments, you can use <code>%1, %2, ... %n</code>.</p>\n<pre><code>(#(str %1 %2 %3) "foo" "bar" "baz")\n; => "foobarbaz"\n</code></pre>\n<p><img src="//forum.freecodecamp.com/images/emoji/emoji_one/rocket.png?v=2" alt=":rocket:" title=":rocket:"> <a href="https://ideone.com/roYRgS">IDEOne it!</a></p>\n<p>| <a href="//forum.freecodecamp.com/t/clojure-loop-recur/18418"><img src="//forum.freecodecamp.com/images/emoji/emoji_one/point_left.png?v=2" alt=":point_left:" title=":point_left:"> Previous</a> | <a href="//forum.freecodecamp.com/t/clojure-resources/18422"><img src="//forum.freecodecamp.com/images/emoji/emoji_one/book.png?v=2" alt=":book:" title=":book:"> Home <img src="//forum.freecodecamp.com/images/emoji/emoji_one/book.png?v=2" alt=":book:" title=":book:"></a> | <a href="//forum.freecodecamp.com/t/clojure-collections/18411">Next <img src="//forum.freecodecamp.com/images/emoji/emoji_one/point_right.png?v=2" alt=":point_right:" title=":point_right:"></a>|<br>\n| <a href="//forum.freecodecamp.com/t/clojure-loop-recur/18418">Loop and Recur</a> | <a href="//forum.freecodecamp.com/t/clojure-resources/18422">Table of Contents</a> | <a href="/http://forum.freecodecamp.com/t/clojure-collections/18411">Collections</a>|</p>',frontmatter:{title:"Clojure More on Functions",parent:"/home/stuart/guides/src/pages/articles/clojure/clojure-more-on-functions/index.md absPath of file"}}},pathContext:{slug:"/articles/clojure/clojure-more-on-functions/"}}}});
//# sourceMappingURL=path---articles-clojure-clojure-more-on-functions-4e10435e8668bfb6bb24.js.map