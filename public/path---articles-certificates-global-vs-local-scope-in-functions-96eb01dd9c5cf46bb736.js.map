{"version":3,"sources":["webpack:///path---articles-certificates-global-vs-local-scope-in-functions-96eb01dd9c5cf46bb736.js","webpack:///./.cache/json/articles-certificates-global-vs-local-scope-in-functions.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-vs-local-scope-in-functions.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,kHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,weACAC,aACAC,MAAA,qCACAC,OAAA,qHAIAC,aACAC,KAAA","file":"path---articles-certificates-global-vs-local-scope-in-functions-96eb01dd9c5cf46bb736.js","sourcesContent":["webpackJsonp([1964],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-vs-local-scope-in-functions.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>It is possible to have both <code>local</code> and <code>global</code> variables with the same name. When you do this, the local variable takes precedence over the <code>global</code> variable.</p>\\n<p>In this example:</p>\\n<pre><code>var someVar = \\\"Hat\\\";\\nfunction myOutfit() {\\n  var someVar = \\\"Head\\\";\\n  return someVar;\\n}\\n</code></pre>\\n<p>The function <code>myOutfit</code> will return <code>\\\"Head\\\"</code> because the <code>local</code> version of the variable is present.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Global Vs Local Scope In Functions\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/global-vs-local-scope-in-functions/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/certificates/global-vs-local-scope-in-functions/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-certificates-global-vs-local-scope-in-functions-96eb01dd9c5cf46bb736.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>It is possible to have both <code>local</code> and <code>global</code> variables with the same name. When you do this, the local variable takes precedence over the <code>global</code> variable.</p>\\n<p>In this example:</p>\\n<pre><code>var someVar = \\\"Hat\\\";\\nfunction myOutfit() {\\n  var someVar = \\\"Head\\\";\\n  return someVar;\\n}\\n</code></pre>\\n<p>The function <code>myOutfit</code> will return <code>\\\"Head\\\"</code> because the <code>local</code> version of the variable is present.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Global Vs Local Scope In Functions\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/global-vs-local-scope-in-functions/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/certificates/global-vs-local-scope-in-functions/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-certificates-global-vs-local-scope-in-functions.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-vs-local-scope-in-functions.json\n// module chunks = 1964"],"sourceRoot":""}