webpackJsonp([178],{"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-introduction.json":function(e,t){e.exports={data:{markdownRemark:{html:'<h2>What is Python?</h2>\n<p><a>Python</a> is a general purpose programming language which is dynamically typed, interpreted, and known for its easy readability with great design principles.</p>\n<p>To know more about Python, you might want to check <a href="https://www.python.org/doc/essays/blurb/">this</a> and <a href="https://docs.python.org/3/faq/general.html">this</a>.</p>\n<h2>Python 2 or Python 3</h2>\n<ul>\n<li>The two versions are similar, with knowledge of one switching to writing code for the other is easy.</li>\n<li>\n<p><a href="https://wiki.python.org/moin/Python2orPython3">Python 2 or Python 3</a></p>\n<ul>\n<li>The 2.x branch will see no new major releases after that. 3.x is under active development [...] This means that all recent standard library improvements, for example, are only available by default in Python 3.x.</li>\n<li>Python ecosystem has amassed a significant amount of quality software over the years. The downside of breaking backwards compatibility in 3.x is that some of that software (especially in-house software in companies) still doesn\'t work on 3.x yet.</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Most *nix based operating systems come with Python installed (usually Python 2). Replacing the system Python is not recommended and may cause problems. However, different versions of Python can be safely installed along side the system Python. See <a href="https://docs.python.org/3/using/index.html">Python Setup and Usage</a></p>\n<p>Windows doesn\'t come with Python, the installer and instructions can be found <a href="https://docs.python.org/3/using/windows.html">here</a></p>\n<h2>Python Interpreter</h2>\n<p>The Python interpreter is what is used to run Python scripts.</p>\n<p>If it is available and in Unix shellâ€™s search path makes it possible to start it by typing the command <code>python</code> followed by the script name will invoke the interpreter and run the script.</p>\n<p><code>hello_campers.py</code></p>\n<pre><code>if __name__ == \'__main__\'\n    print(\'Hello campers!\')\n</code></pre>\n<p>From terminal:</p>\n<pre><code>$ python hello_campers.py\nHello campers!\n</code></pre>\n<p>"When multiple versions of Python are installed, calling them by version is possible depending on the install configuration. In the Cloud9 ide custom environment, they can be invoked like:</p>\n<pre><code>$ python --version\nPython 2.7.6\n$ python3 --version\nPython 3.4.3\n$ python3.5 --version\nPython 3.5.1\n</code></pre>\n<h2>Python Interpreter Interactive Mode</h2>\n<p>Interactive mode can be started by invoking the Python interpreter with the <code>-i</code> flag or without any arguments.</p>\n<p>Interactive mode has a prompt where Python commands can be entered and run:</p>\n<pre><code>$ python3.5\nPython 3.5.1 (default, Dec 18 2015, 00:00:00)\n[GCC 4.8.4] on linux\nType "help", "copyright", "credits" or "license" for more information.\n>>> print("Hello campers!")\nHello campers!\n>>> 1 + 2\n3\n>>> exit()\n$\n</code></pre>\n<h2>The Zen of Python</h2>\n<p>Some of the principles that influenced the design of Python are included as an easter egg and can be read by using the command inside Python interpreter interactive mode:</p>\n<pre><code>>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren\'t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you\'re Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it\'s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let\'s do more of those!\n</code></pre>\n<h2>Documentation</h2>\n<p>Python is well <a href="https://docs.python.org/3/">documented</a>. These docs include tutorials, guides, references and meta information for language.</p>\n<p>Another important reference is the Python Enhancement Proposals (<a href="https://www.python.org/dev/peps/">PEPs</a>). Included in the PEPs is a style guide for writing Python code, <a href="https://www.python.org/dev/peps/pep-0008/"><code>PEP 8</code></a>.</p>\n<h2>Debugging</h2>\n<p>Inline <code>print</code> statements can be used for simple debugging:</p>\n<blockquote>\n<p><strong>... often the quickest way to debug a program is to add a few print statements to the source: the fast edit-test-debug cycle makes this simple approach very effective.</strong></p>\n<p>--<a href="https://www.python.org/doc/essays/blurb/">Executive Summary</a></p>\n</blockquote>\n<p>Python also includes more powerful tools for debugging, such as:</p>\n<ul>\n<li>logging module, <a href="https://docs.python.org/3/library/logging.html"><em>logging</em></a></li>\n<li>debugging module, <a href="https://docs.python.org/3/library/pdb.html"><em>pdb</em></a></li>\n</ul>\n<p>Just note that these exist for now.</p>\n<h2>Hello World!</h2>\n<p>Going back to the docs, we can read about the <a href="https://docs.python.org/3/library/functions.html#print"><code>print</code></a> function, a <a href="https://docs.python.org/3/library/functions.html"><em>built-in function</em></a> of the <a href="https://docs.python.org/3/library/index.html">Python Standard Library</a>.</p>\n<pre><code>print(*objects, sep=\' \', end=\'\\n\', file=sys.stdout, flush=False)\n</code></pre>\n<p>The built-in functions are listed in alphabetical order. The name is followed by a parenthesized list of formal parameters with optional default values. Under that is a short description of the function and its parameters are given and occasionally an example.</p>\n<p>The <a href="https://docs.python.org/3/library/functions.html#print"><code>print</code></a> function in Python 3 replaces the <a href="https://docs.python.org/2/reference/simple_stmts.html#print"><code>print</code></a> statement in Python 2.</p>\n<pre><code>>>> print("Hello world!")\nHello world!\n</code></pre>\n<p>A function is called when the name of the function is followed by <code>()</code>. For the Hello world! example, the print function is called with a string as an argument for the first parameter. For the rest of the parameters the defaults are used.</p>\n<p>The argument that we called the <code>print</code> function with is a <code>str</code> object or <em>string</em>, one of Python\'s <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str"><em>built-in types</em></a>.</p>\n<p>The <code>objects</code> parameter is prefixed with a <code>*</code> which indicates that the function will take an arbitrary number of arguments for that parameter.</p>',frontmatter:{title:"Python Introduction",parent:"/home/stuart/guides/src/pages/articles/python/python-introduction/index.md absPath of file"}}},pathContext:{slug:"/articles/python/python-introduction/"}}}});
//# sourceMappingURL=path---articles-python-python-introduction-d1fa1498111e296edf0f.js.map