{"version":3,"sources":["webpack:///path---articles-certificates-global-scope-and-functions-4bef8845d2be4c6e5bbf.js","webpack:///./.cache/json/articles-certificates-global-scope-and-functions.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-scope-and-functions.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,0GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,8gBACAC,aACAC,MAAA,6BACAC,OAAA,6GAIAC,aACAC,KAAA","file":"path---articles-certificates-global-scope-and-functions-4bef8845d2be4c6e5bbf.js","sourcesContent":["webpackJsonp([1971],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-scope-and-functions.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>In JavaScript, <code>scope</code> refers to the visibility of variables. Variables which are defined outside of a function block have <code>Global</code> scope. This means, they can be seen everywhere in your JavaScript code.</p>\\n<p>Variables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Global Scope and Functions\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/global-scope-and-functions/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/certificates/global-scope-and-functions/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-certificates-global-scope-and-functions-4bef8845d2be4c6e5bbf.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>In JavaScript, <code>scope</code> refers to the visibility of variables. Variables which are defined outside of a function block have <code>Global</code> scope. This means, they can be seen everywhere in your JavaScript code.</p>\\n<p>Variables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Global Scope and Functions\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/global-scope-and-functions/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/certificates/global-scope-and-functions/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-certificates-global-scope-and-functions.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-certificates-global-scope-and-functions.json\n// module chunks = 1971"],"sourceRoot":""}