webpackJsonp([1212],{"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-standard-objects-object-object-getownpropertynames.json":function(e,n){e.exports={data:{markdownRemark:{html:"<p>The <code>Object.getOwnPropertyNames()</code> method returns an array of all properties (enumerable or not) found directly upon a given object.</p>\n<h2>Syntax</h2>\n<pre><code>Object.getOwnPropertyNames(obj)\n</code></pre>\n<h3>Parameters</h3>\n<p><strong>obj</strong></p>\n<p>The object whose enumerable <em>and non-enumerable</em> own properties are to be returned.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\">MDN link</a> | <a href=\"https://msdn.microsoft.com/en-us/LIBRary/ff688126(v=vs.94).aspx\">MSDN link</a></p>\n<h2>Description</h2>\n<p><code>Object.getOwnPropertyNames()</code> returns an array whose elements are strings corresponding to the enumerable <em>and non-enumerable</em> properties found directly upon object. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a <code>for...in</code> loop (or by <code>Object.keys()</code>) over the properties of the object. The ordering of the non-enumerable properties in the array, and among the enumerable properties, is not defined.</p>\n<h2>Examples</h2>\n<pre><code>var arr = ['a', 'b', 'c'];\nconsole.log(Object.getOwnPropertyNames(arr).sort()); // logs '0,1,2,length'\n\n// Array-like object\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.getOwnPropertyNames(obj).sort()); // logs '0,1,2'\n\n// Logging property names and values using Array.forEach\nObject.getOwnPropertyNames(obj).forEach(function(val, idx, array) {\n  console.log(val + ' -> ' + obj[val]);\n});\n// logs\n// 0 -> a\n// 1 -> b\n// 2 -> c\n\n// non-enumerable property\nvar my_obj = Object.create({}, {\n  getFoo: {\n    value: function() { return this.foo; },\n    enumerable: false\n  }\n});\nmy_obj.foo = 1;\n\nconsole.log(Object.getOwnPropertyNames(my_obj).sort()); // logs 'foo,getFoo'\n\nfunction Pasta(grain, size, shape) {\n    this.grain = grain; \n    this.size = size; \n    this.shape = shape; \n}\n\nvar spaghetti = new Pasta(\"wheat\", 2, \"circle\");\n\nvar names = Object.getOwnPropertyNames(spaghetti).filter(CheckKey);\ndocument.write(names); \n\n// Check whether the first character of a string is 's'. \nfunction CheckKey(value) {\n    var firstChar = value.substr(0, 1); \n    if (firstChar.toLowerCase() == 's')\n        return true; \n    else\n         return false; \n}\n// Output:\n// size,shape\n</code></pre>",frontmatter:{title:"Object getOwnPropertyNames",parent:"/home/stuart/guides/src/pages/articles/javascript/standard-objects/object/object-getownpropertynames/index.md absPath of file"}}},pathContext:{slug:"/articles/javascript/standard-objects/object/object-getownpropertynames/"}}}});
//# sourceMappingURL=path---articles-javascript-standard-objects-object-object-getownpropertynames-9295cd678d38bcc9a95e.js.map