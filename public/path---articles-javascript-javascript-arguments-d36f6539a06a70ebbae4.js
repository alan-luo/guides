webpackJsonp([1260],{"./node_modules/json-loader/index.js!./.cache/json/articles-javascript-javascript-arguments.json":function(e,t){e.exports={data:{markdownRemark:{html:'<p>The arguments object is an <strong>array-like object</strong> <em>(meaning that it looks like an array but it\'s not)</em> that stores all of the arguments that you passed to a function and is proprietary to that function in particular. If you were to pass 3 arguments to a function, say <code>storeNames()</code>, those 3 arguments would be stored inside an object called <strong>arguments</strong> and it would look like this when we pass the arguments <code>storeNames("Mulder", "Scully", "Alex Krycek")</code> to our function:</p>\n<ul>\n<li>First, we declare a function and make it return the arguments object.</li>\n</ul>\n<p><code>javascript function storeNames() { return arguments; }</code> </p>\n<ul>\n<li>Then, when we execute that function with <strong>n arguments</strong>, 3 in this case, it will return the object to us and it will <strong>look like</strong> an array. We can convert it to an array, but more on that later...</li>\n</ul>\n<p><code>javascript // If we execute the following line in the console: storeNames("Mulder", "Scully", "Alex Kryceck"); // The output will be: ["Mulder", "Scully", "Alex Kryceck"]</code> </p>\n<p>If you want to know more about this, such as converting it to an array or the optimization problem that comes with using the <em>slice(</em>) method and how to solve it, click on <strong>read more</strong> (Gitter Chat Only).</p>\n<h2>Treat it as an array</h2>\n<p>You can invoke arguments by using <code>arguments[n]</code> (where <em>n</em> is the index of the argument in the array-like object) but if you want to use it as an array for iteration purposes or applying array methods to it, you need to <em>convert it to an array</em> by declaring a variable and using the Array.prototype.slice.call method (because <em>arguments</em> is not an array):</p>\n<pre><code>var args = Array.prototype.slice.call(arguments)\n</code></pre>\n<p>Since <strong>slice()</strong> has two (the parameter <strong>end</strong> is optional) parameters, you can grab a certain portion of the arguments by specifying (using the <em>slice.call()</em> method renders these two parameters optional, not just <em>end</em>) the beginning and the ending of your portion; check out the following code:</p>\n<pre><code>function getGrades() {\n    var args = Array.prototype.slice.call(arguments, 1, 3);\n    return args;\n}\n\n// Let\'s output this!\nconsole.log(getGrades(90, 100, 75, 40, 89, 95));\n\n// OUTPUT SHOULD BE: //\n// [100, 75] &#x3C;- Why? Because it started from index 1 and stopped at index 3\n// so, index 3 (40) wasn\'t taken in consideration.\n//\n// If we remove the \'3\' parameter, leaving just (arguments, 1) we\'d get\n// every argument from index 1: [100, 75, 40, 89, 95].\n</code></pre>\n<h3>Optimization issues with Array.slice()</h3>\n<p>There is a little problem, it\'s not recommended to use slice in the arguments object (optimization reasons)...</p>\n<blockquote>\n<p><strong>Important</strong>: You should not slice on arguments because it prevents optimizations in JavaScript engines (V8 for example). Instead, try constructing a new array by iterating through the arguments object.</p>\n<p><em>by</em> <strong><em>Mozilla Developer Network</em></strong></p>\n</blockquote>\n<p>So, what other method is available to convert <em>arguments</em> to an array? I recommend the for-loop (not the for-in loop), you can do it like this:</p>\n<pre><code>var args = []; // Empty array, at first.\nfor (var i = 0; i &#x3C; arguments.length; i++) {\n    args.push(arguments[i])\n} // Now \'args\' is an array that holds your arguments.\n</code></pre>\n<p>For more information on the optimization issues:<br>\n<a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments">Optimization Killers: Managing Arguments</a></p>',frontmatter:{title:"javaScript Arguments",parent:"/home/stuart/guides/src/pages/articles/javascript/javascript-arguments/index.md absPath of file"}}},pathContext:{slug:"/articles/javascript/javascript-arguments/"}}}});
//# sourceMappingURL=path---articles-javascript-javascript-arguments-d36f6539a06a70ebbae4.js.map