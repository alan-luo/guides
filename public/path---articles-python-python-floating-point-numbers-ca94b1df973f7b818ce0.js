webpackJsonp([189],{"./node_modules/json-loader/index.js!./.cache/json/articles-python-python-floating-point-numbers.json":function(e,n){e.exports={data:{markdownRemark:{html:"<p>Some general information about floating point numbers and how they work in Python, can be found <a href=\"https://docs.python.org/3/tutorial/floatingpoint.html\">here</a>.</p>\n<p>Nearly all implementations of Python follow the IEEE 754 specification: Standard for Binary Floating-Point Arithmetic. More information found on the <a href=\"http://grouper.ieee.org/groups/754/\">IEEE site</a>.</p>\n<p>Float objects can be created using using <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#floating-point-literals\">floating point literals</a>:</p>\n<pre><code>>>> 3.14\n3.14\n>>> 314\\.    # Trailing zero(s) not required.\n314.0\n>>> .314    # Leading zero(s) not required.\n0.314\n>>> 3e0\n3.0\n>>> 3E0     # 'e' or 'E' can be used.\n3.0\n>>> 3e1     # Positive value after e moves the decimal to the right.\n30.0\n>>> 3e-1    # Negative value after e moves the decimal to the left.\n0.3\n>>> 3.14e+2 # '+' not required but can be used for exponent part.\n314.0\n</code></pre>\n<p>Numeric literals do not contain a sign, however creating negative float objects is possible by prefixing with a unary <code>-</code> (minus) operator with no space before the literal</p>\n<pre><code>>>> -3.141592653589793\n-3.141592653589793\n>>> type(-3.141592653589793)\n&#x3C;class 'float'>\n</code></pre>\n<p>Likewise, positive float objects can be prefixed with a unary <code>+ (</code>plus) operator with no space before the literal. Usually <code>+</code> is omitted:</p>\n<pre><code>>>> +3.141592653589793\n3.141592653589793\n</code></pre>\n<p>Note that leading and trailing zero(s) are valid for floating point literals</p>\n<pre><code>>>> 0.0\n0.0\n>>> 00.00\n0.0\n>>> 00100.00100\n100.001\n>>> 001e0010      # Same as 1e10\n10000000000.0\n</code></pre>\n<p>The <a href=\"https://docs.python.org/3/library/functions.html#float\"><code>float</code> constructor</a> is another way to create <code>float</code> objects.</p>\n<p>Creating <code>float</code> objects with floating point literals is preferred when possible:</p>\n<pre><code>>>> a = 3.14         # Prefer floating point literal when possible.\n>>> type(a)\n&#x3C;class 'float'>\n>>> b = int(3.14)    # Works but unnecessary.\n>>> type(b)\n&#x3C;class 'float'>\n</code></pre>\n<p>However, the float constructor allows for creating float objects from other number types:</p>\n<pre><code>>>> a = 4\n>>> type(a)\n&#x3C;class 'int'>\n>>> print(a)\n4\n>>> b = float(4)\n>>> type(b)\n&#x3C;class 'float'>\n>>> print(b)\n4.0\n>>> float(400000000000000000000000000000000)\n4e+32\n>>> float(.00000000000000000000000000000004)\n4e-32\n>>> float(True)\n1.0\n>>> float(False)\n0.0\n</code></pre>\n<p>The <code>float</code> constructor will also make <code>float</code> objects from strings that represent number literals:</p>\n<pre><code>>>> float('1')\n1.0\n>>> float('.1')\n0.1\n>>> float('3.')\n3.0\n>>> float('1e-3')\n0.001\n>>> float('3.14')\n3.14\n>>> float('-.15e-2')\n-0.0015\n</code></pre>\n<p>The <code>float</code> constructor can also be used to make numeric representation of <code>NaN</code> (Not a Number), negative <code>infinity</code> and <code>infinity</code> (note strings for these are case insensitive):</p>\n<pre><code>>>> float('nan')\nnan\n>>> float('inf')\ninf\n>>> float('-inf')\n-inf\n>>> float('infinity')\ninf\n>>> float('-infinity')\n-inf\n</code></pre>",frontmatter:{title:"Python Floating Point Numbers",parent:"/home/stuart/guides/src/pages/articles/python/python-floating-point-numbers/index.md absPath of file"}}},pathContext:{slug:"/articles/python/python-floating-point-numbers/"}}}});
//# sourceMappingURL=path---articles-python-python-floating-point-numbers-ca94b1df973f7b818ce0.js.map