{"version":3,"sources":["webpack:///path---articles-certificates-logical-order-in-if-else-statements-0c26949c6ddf9b81b111.js","webpack:///./.cache/json/articles-certificates-logical-order-in-if-else-statements.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/articles-certificates-logical-order-in-if-else-statements.json","module","exports","data","markdownRemark","html","frontmatter","title","parent","pathContext","slug"],"mappings":"AAAAA,cAAc,OAERC,mHACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,gBACAC,KAAA,gvCACAC,aACAC,MAAA,sCACAC,OAAA,sHAIAC,aACAC,KAAA","file":"path---articles-certificates-logical-order-in-if-else-statements-0c26949c6ddf9b81b111.js","sourcesContent":["webpackJsonp([2170],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/articles-certificates-logical-order-in-if-else-statements.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"markdownRemark\": {\n\t\t\t\t\"html\": \"<p>Order is important in <code>if</code>, <code>else if</code> and <code>else</code> statements.</p>\\n<p>The loop is executed from top to bottom so you will want to be careful of which statement comes first.</p>\\n<p>Take these two functions as an example.</p>\\n<h2>Examples:</h2>\\n<pre><code>function foo(x) {\\n  if (x &#x3C; 1) {\\n    return \\\"Less than one\\\";\\n    } \\n  else if (x &#x3C; 2) {\\n    return \\\"Less than two\\\";\\n    } \\n  else {\\n    return \\\"Greater than or equal to two\\\";\\n    }\\n}\\n</code></pre>\\n<p>And the second just switches the order of the statements:</p>\\n<pre><code>function bar(x) {\\n  if (x &#x3C; 2) {\\n    return \\\"Less than two\\\";\\n    } \\n  else if (x &#x3C; 1) {\\n    return \\\"Less than one\\\";\\n    }\\n  else {\\n    return \\\"Greater than or equal to two\\\";\\n    }\\n}\\n</code></pre>\\n<p>While these two functions look nearly identical, if we pass a number to both we get different outputs.</p>\\n<pre><code>foo(0) // \\\"Less than one\\\" \\n\\nbar(0) // \\\"Less than two\\\"\\n</code></pre>\\n<p>So be careful while using the <code>if</code>, <code>else if</code> and <code>else</code> statements and always remember that these are executed from top to bottom. Keep this in mind placing your statements accordingly so that you get the desired output.</p>\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Logical Order in if Else Statements\",\n\t\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/logical-order-in-if-else-statements/index.md absPath of file\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/articles/certificates/logical-order-in-if-else-statements/\"\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---articles-certificates-logical-order-in-if-else-statements-0c26949c6ddf9b81b111.js","module.exports = {\n\t\"data\": {\n\t\t\"markdownRemark\": {\n\t\t\t\"html\": \"<p>Order is important in <code>if</code>, <code>else if</code> and <code>else</code> statements.</p>\\n<p>The loop is executed from top to bottom so you will want to be careful of which statement comes first.</p>\\n<p>Take these two functions as an example.</p>\\n<h2>Examples:</h2>\\n<pre><code>function foo(x) {\\n  if (x &#x3C; 1) {\\n    return \\\"Less than one\\\";\\n    } \\n  else if (x &#x3C; 2) {\\n    return \\\"Less than two\\\";\\n    } \\n  else {\\n    return \\\"Greater than or equal to two\\\";\\n    }\\n}\\n</code></pre>\\n<p>And the second just switches the order of the statements:</p>\\n<pre><code>function bar(x) {\\n  if (x &#x3C; 2) {\\n    return \\\"Less than two\\\";\\n    } \\n  else if (x &#x3C; 1) {\\n    return \\\"Less than one\\\";\\n    }\\n  else {\\n    return \\\"Greater than or equal to two\\\";\\n    }\\n}\\n</code></pre>\\n<p>While these two functions look nearly identical, if we pass a number to both we get different outputs.</p>\\n<pre><code>foo(0) // \\\"Less than one\\\" \\n\\nbar(0) // \\\"Less than two\\\"\\n</code></pre>\\n<p>So be careful while using the <code>if</code>, <code>else if</code> and <code>else</code> statements and always remember that these are executed from top to bottom. Keep this in mind placing your statements accordingly so that you get the desired output.</p>\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Logical Order in if Else Statements\",\n\t\t\t\t\"parent\": \"/home/stuart/guides/src/pages/articles/certificates/logical-order-in-if-else-statements/index.md absPath of file\"\n\t\t\t}\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/articles/certificates/logical-order-in-if-else-statements/\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/articles-certificates-logical-order-in-if-else-statements.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/articles-certificates-logical-order-in-if-else-statements.json\n// module chunks = 2170"],"sourceRoot":""}